# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ActivitatsEconomiques
                                 A QGIS plugin
 ActivitatsEconomiques
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-11-14
        git sha              : $Format:%H$
        copyright            : (C) 2018 by CCU
        email                : jlopez@tecnocampus.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import collections
import datetime
import os
import os.path
import time
from os.path import expanduser

import processing
import psycopg2
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtSql import *
from PyQt5.QtWidgets import (QAction, QApplication, QColorDialog,
                             QDialogButtonBox, QFileDialog, QGridLayout,
                             QMessageBox, QProgressBar, QSizePolicy, QToolBar)
from qgis.core import (Qgis, QgsCoordinateReferenceSystem, QgsDataSourceUri,
                       QgsFeature, QgsFillSymbol, QgsGeometry,
                       QgsGradientColorRamp, QgsGraduatedSymbolRenderer,
                       QgsLayerTreeLayer, QgsProject, QgsRenderContext,
                       QgsRendererRangeLabelFormat, QgsVectorLayer,
                       QgsVectorLayerExporter)
from qgis.gui import QgsMessageBar
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator
from qgis.utils import iface

# Import the code for the dialog
from .ActivitatsEconomiques_dialog import ActivitatsEconomiquesDialog
# Initialize Qt resources from file resources.py
from .resources import *

nomBD1=""
contra1=""
host1=""
port1=""
usuari1=""
schema=""
cur=None
conn=None
micolor_Topo=None
micolor_ZI=None
micolor_Graf=None
Fitxer=""
Path_Inicial=expanduser("~")
Versio_modul="V_Q3.240920"
progress=None
versio_db = ""

class ActivitatsEconomiques:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ActivitatsEconomiques_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = ActivitatsEconomiquesDialog()
        self.dlg.btn_cerca.clicked.connect(self.on_click_cerca)
        self.dlg.btn_totes.clicked.connect(self.on_click_totes)
        self.dlg.btn_esborra_sel_Nom.clicked.connect(self.on_click_Borra_seleccio_noms)
        self.dlg.btn_esborra_sel_Numero.clicked.connect(self.on_click_Borra_seleccio_numeros)
        self.dlg.ListaActivitatsEpigraf.selectionModel().selectionChanged.connect(self.on_seleccion_change_Epigrafs)
        self.dlg.ListaActivitatsDesc.selectionModel().selectionChanged.connect(self.on_seleccion_change_Desc)
        self.dlg.btn_mostra_sel.clicked.connect(self.on_click_mostra_seleccio)
        self.dlg.ListaActivitatsDesc.clicked.connect(self.on_click_List)
        #self.dlg.ListaActivitatsEpigraf.clicked.connect(self.on_click_ListEpigraf)
        self.dlg.INICI.clicked.connect(self.on_click_INICI)
        self.dlg.Sortir.clicked.connect(self.on_click_Sortir)
        self.dlg.ComboConn.currentIndexChanged.connect(self.on_Change_ComboConn)
        self.dlg.GrafCombo.currentIndexChanged.connect(self.on_Change_GrafCombo)
        self.dlg.ColorTopos.clicked.connect(self.on_click_ColorTopos)
        self.dlg.ColorZI.clicked.connect(self.on_click_ColorZI)
        self.dlg.ColorGraf.clicked.connect(self.on_click_ColorGraf)
        self.dlg.Veure_ZI.stateChanged.connect(self.on_click_Veure_ZI)
        self.dlg.ZIGraf_radio.toggled.connect(self.on_toggled_ZIGraf_radio)
        self.dlg.parcela.toggled.connect(self.on_toggled_parcela)
        self.dlg.Transparencia.valueChanged.connect(self.on_valuechange_Transparencia)
        # Declare instance attributes
        self.actions = []
        self.menu = self.tr('&CCU')
        # TODO: We are going to let the user set this up in a future iteration
        #self.toolbar = self.iface.addToolBar('CCU')
        #self.toolbar.setObjectName('Activitats Economiques')
        trobat=False
        for x in iface.mainWindow().findChildren(QToolBar,'CCU'): 
            self.toolbar = x
            trobat=True
        
        if not trobat:
            self.toolbar = self.iface.addToolBar('CCU')
            self.toolbar.setObjectName('CCU')

        self.bar = QgsMessageBar()
        self.bar.setSizePolicy( QSizePolicy.Minimum, QSizePolicy.Fixed )
        self.dlg.setLayout(QGridLayout())
        self.dlg.layout().setContentsMargins(0, 0, 0, 0)
        self.dlg.buttonbox = QDialogButtonBox(QDialogButtonBox.Ok)
        self.dlg.buttonbox.accepted.connect(self.run)
        self.dlg.buttonbox.setVisible(False)
        self.dlg.layout().addWidget(self.dlg.buttonbox, 0, 0, 2, 1)
        self.dlg.layout().addWidget(self.bar, 0, 0,1,1)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ActivitatsEconomiques', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ActivitatsEconomiques/icon.png'
        self.add_action(
            icon_path,
            text=self.tr('Activitats Economiques'),
            callback=self.run,
            parent=self.iface.mainWindow())

    def EstatInicial(self):
        global TEMPORARY_PATH
        """Aquesta funcio reseteja l'estat de tots els elements de la interficie"""
        global Versio_modul
        self.bar.clearWidgets()
        self.dlg.versio.setText(Versio_modul)
        self.dlg.ColorTopos.setStyleSheet('border:1px solid #000000; background-color: #ff0000')
        self.dlg.ColorTopos.setAutoFillBackground(True)
        self.dlg.ColorZI.setStyleSheet('border:1px solid #000000; background-color: #aaffff')
        self.dlg.ColorZI.setAutoFillBackground(True)
        self.dlg.AutoGen.setVisible(False)
        self.dlg.VeureZI_panel.setVisible(False)
        self.dlg.barraCerca.clear()
        self.dlg.barraCerca.setStyleSheet("font-size: 14px; border: 1px #000000; background-color: #FFFFFF")
        self.dlg.ZIGraf_panel.setVisible(False)
        self.dlg.Poblacio_panel.setVisible(False)
        self.dlg.ListaActivitatsDesc.clear()
        self.dlg.ListaActivitatsEpigraf.clear()
        self.dlg.ListaActivitatsEpigraf.setVisible(True)
        self.dlg.texte_2.setText('1')
        self.dlg.texte_3.setText("Llista d'Epígrafs")
        self.dlg.EstatConnexio.setText('No connectat')
        self.dlg.parcela.setChecked(False)
        self.dlg.parcela.setChecked(True)
        self.dlg.Radi_ZI.setText('150')
        self.dlg.Veure_ZI.setChecked(False)
        self.dlg.ColorTopos.setStyleSheet('border:1px solid #000000; background-color: #ff0000')
        self.dlg.ColorZI.setStyleSheet('border:1px solid #000000; background-color: #aaffff')
        self.dlg.ColorGraf.setStyleSheet('border:1px solid #000000; background-color: #ff0000')
        self.dlg.EstatConnexio.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
        self.dlg.SSTab1.setCurrentIndex(0)
        self.dlg.SSTab2.setCurrentIndex(0)
        self.dlg.RelacionarPoblacio.setChecked(False)
        self.dlg.NoMostrarZI.setChecked(False)
        self.dlg.ColorDegradat.setCurrentIndex(0)
        self.dlg.Transparencia.setValue(50)
        self.dlg.ZICirc_radio.setChecked(False)
        self.dlg.ZICirc_radio.setChecked(True)
        self.dlg.ZIGraf_radio.setVisible(True)
        self.dlg.CostNusos.setVisible(True)
        self.dlg.GrafCombo.setCurrentIndex(0)
        self.dlg.CostInvers_chk.setVisible(False)
        self.dlg.CalculRadiTopos_panel.setVisible(False)
        self.dlg.buf_chk.setVisible(False)
        #progress.setValue(0)
        self.dlg.Progres.setValue(0)
        self.dlg.Progres.setVisible(False)
        self.dlg.btn_mostra_sel.setVisible(False)
        self.dlg.Mostra_punt_chk.setChecked(True)
        self.dlg.chk_calc_local.setChecked(True)
        self.dlg.setEnabled(True)

        QApplication.processEvents()
        
        self.dlg.Transparencia_lbl.setText(str(self.dlg.Transparencia.value())+' %')
        if (os.name=='nt'):
            TEMPORARY_PATH=os.environ['TMP']
        else:
            TEMPORARY_PATH=os.environ['TMPDIR']

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr('&CCU'),
                action)
            self.toolbar.removeAction(action)

    def populateComboBox(self,combo,list,predef,sort):
        """Aquesta funcio omple les pestanyes desplegables amb els paramtres que li passem per parametres"""
        combo.blockSignals (True)
        combo.clear()
        model=QStandardItemModel(combo)
        predefInList = None
        for elem in list:
            try:
                item = QStandardItem(str(elem))
            except TypeError:
                item = QStandardItem(str(elem))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        if sort:
            model.sort(0)
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0,predef)
                combo.setCurrentIndex(0)
        combo.blockSignals (False)

    def getConnections(self):
        """Aquesta funcio obte les connexions del nostre projecte QGIS"""
        s = QSettings() 
        s.beginGroup("PostgreSQL/connections")
        currentConnections = s.childGroups()
        s.endGroup()
        return currentConnections

    def getGeometryType(self,layer,suggestion = ""):
        """Aquesta funcio obte el tipus de geometria de la taula que li passem per parametres"""
        global schema
        autoGeom = self.guessGeometryField(layer,suggestion=suggestion)
        sql='''SELECT ST_GeometryType(%s) FROM "%s"."%s";''' % (autoGeom,schema,layer)
        query = self.db.exec_(sql)
        query.next()
        res = str(query.value(0))
        return res

    def getGeometryFields(self,layer):
        """Aquesta funcio obte el camp de geometria de la taula que li passem per parametres"""
        fields = self.getFieldsContent(layer)
        geomFields = []
        for field in fields:
            if self.getFieldsType(layer,field)== 'geometry':
                geomFields.append(field)
        if geomFields == []:
            return None
        else:
            return geomFields

    def guessGeometryField(self,layer,suggestion = None):
        """Aquesta funcio obte el camp de geometria de la taula que li passem per parametres"""
        if suggestion in self.getFieldsContent(layer):
           return suggestion
        else:
            try:
                return self.getGeometryFields(layer)[0]
            except:
                return None
    
    def getFieldsContent(self,layer):
        """Aquesta funcio obte el nom dels camps de la taula que li passem per parametres"""
        global schema
        sql="SELECT column_name FROM information_schema.columns WHERE table_name='%s' and table_schema='%s';" % (layer,schema)
        query = self.db.exec_(sql)
        fields=[]
        while (query.next()):
            fields.append(str(query.value(0)))
        if fields==[]:
            sql="SELECT attname, typname ,relname FROM pg_attribute a JOIN pg_class c on a.attrelid = c.oid JOIN pg_type t on a.atttypid = t.oid WHERE relname = '%s' and attnum >= 1;" % layer
            query = self.db.exec_(sql)
            while (query.next()):
                fields.append(str(query.value(0)))
        return fields
    
    def getFieldsType(self,layer,field):
        """Aquesta funcio obte el tipus del camp de la taula i el camp que li passem per parametres"""
        sql = "SELECT typname FROM pg_attribute a JOIN pg_class c on a.attrelid = c.oid JOIN pg_type t on a.atttypid = t.oid WHERE relname = '%s' and attname = '%s'" % (layer,field)
        query = self.db.exec_(sql)
        query.next()
        res = str(query.value(0))
        return res

    def getGeometryField(self,layer):
        """Aquesta funcio obte el camp de geometria de la taula que li passem per parametres"""
        fields = self.getFieldsContent(layer)
        for field in fields:
            if self.getFieldsType(layer,field)== 'geometry':
                return field
        return -1
        
    def getLayers(self,schema=None):
        """Aquesta funcio cerca les entitats necessaries per fer funcionar el plugin"""
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        if not schema:
            schema = self.schema
        sql="select table_name from information_schema.tables where table_schema='%s';" % schema
        self.db = QSqlDatabase.addDatabase("QPSQL")
        self.db.setHostName(host1)
        self.db.setPort(int(port1))
        self.db.setDatabaseName(nomBD1)
        self.db.setUserName(usuari1)
        self.db.setPassword(contra1)
        while not self.db.open():
            print (self.db.lastError().text())

        query = self.db.exec_(sql)
        layers=[]
        exclusionList = ["spatial_ref_sys","geography_columns","geometry_columns","raster_columns","raster_overviews"]
        while (query.next()):
            if not query.value(0) in exclusionList : 
                if self.getGeometryField(query.value(0)) != -1:
                    layers.append(query.value(0))
        layers.sort()
        return layers

    def cercaDescripcio(self):
        """Aquesta funcio cerca els epigrafs que continguin la paraula clau que li passem"""
        global cur
        global conn        #Sentencia SQL
        self.dlg.ListaActivitatsDesc.clear()
        CAMP=chr(34)+"description"+chr(34)
        CAMP2=chr(34)+"epigraph_code"+chr(34)
        TAULA=f"epigraph_{Fitxer}"
        sql="SELECT "+CAMP+","+CAMP2+" FROM "+chr(34)+TAULA+chr(34)
        filtre=self.dlg.barraCerca.text()
        wheresql=" WHERE UPPER("+CAMP+") LIKE UPPER ('%"+filtre+"%') order by "+CAMP+";"
        try:
            cur.execute(sql+wheresql)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            missatgeError="Error en CercaDescripcio"
            print (missatgeError)
            QMessageBox.information(None, "Error", missatgeError)
            self.dlg.setEnabled(True)
            return
        
        rows = cur.fetchall()
        for index,row in enumerate(rows,start=0):
            desc=row[0]
            self.dlg.ListaActivitatsDesc.addItem(desc)
            self.dlg.ListaActivitatsDesc.item(index).setToolTip(str(row[1]))
        var=cur.fetchall()
        return var

    def cercaEpigraf(self):
        """Aquesta funcio cerca els epigrafs que continguin la paraula clau que li passem"""
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        global schema
        global cur
        global conn        #Sentencia SQL
        self.dlg.ListaActivitatsEpigraf.clear()
        CAMP=chr(34)+"description"+chr(34)
        CAMP2=chr(34)+"epigraph_code"+chr(34)
        TAULA=f"epigraph_{Fitxer}"
        sql="SELECT "+CAMP2+","+CAMP+" FROM "+chr(34)+TAULA+chr(34)
        filtre=self.dlg.barraCerca.text()
        wheresql=" ORDER BY "+CAMP2+";"
        
        try:
            cur.execute(sql+wheresql)
            rows = cur.fetchall()
            for index,row in enumerate(rows,start=0):
                desc=row[1]
                self.dlg.ListaActivitatsEpigraf.addItem(str(row[0]))
                self.dlg.ListaActivitatsEpigraf.item(index).setToolTip(desc)
            var=cur.fetchall()
            return var
            
        except:
            self.dlg.EstatConnexio.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
            self.dlg.EstatConnexio.setText(f'Error: Hi ha algun camp erroni en la taula epigraph.')
            self.dlg.EstatConnexio.setToolTip(f'Error: Hi ha algun camp erroni en la taula epigraph.')
            print ("I am unable to connect to the database")
        
    # Create the actions 
    #@pyqtSlot()
    def on_click_cerca(self):
        """Aquesta es una funcio que fa una crida a una funcio auxiliar per fer una cerca entre els epigrafs"""
        self.cercaDescripcio()

    def on_click_Borra_seleccio_noms(self):
        """Aquesta funcio esborra la llista dels epigrafs seleccionats"""
        self.dlg.ListaActivitatsDesc.clearSelection()
                
    def on_click_Borra_seleccio_numeros(self):
        """Aquesta funcio esborra la llista dels numeros dels epigrafs seleccionats"""
        self.dlg.ListaActivitatsEpigraf.clearSelection()

    def on_seleccion_change_Epigrafs(self,current, previous):
        """Aquesta funcio mostra el widget de la part superior i mostra el numero d'elements seleccionats"""
        seleccio_noms=len(self.dlg.ListaActivitatsDesc.selectedItems())
        seleccio_numeros=len(self.dlg.ListaActivitatsEpigraf.selectedItems())
        self.bar.clearWidgets()
        self.bar.pushMessage("Info", 'Seleccionats: Descripcio('+str(seleccio_noms)+') - Epigraf('+str(seleccio_numeros)+")", level=Qgis.Info)
        self.bar.layout().addWidget(self.dlg.btn_mostra_sel, 0, 0)
        self.dlg.btn_mostra_sel.setVisible(True)

    def on_seleccion_change_Desc(self,current, previous):
        """Aquesta es una funcio auxiliar que controla l'aparença d'alguns elements de la interficie"""
        seleccio_noms=len(self.dlg.ListaActivitatsDesc.selectedItems())
        seleccio_numeros=len(self.dlg.ListaActivitatsEpigraf.selectedItems())
        self.bar.clearWidgets()
        self.bar.pushMessage("Info", 'Seleccionats: Descripció('+str(seleccio_noms)+') - Epígraf('+str(seleccio_numeros)+")", level=Qgis.Info)
        self.bar.layout().addWidget(self.dlg.btn_mostra_sel, 0, 0)
        self.dlg.btn_mostra_sel.setVisible(True)

    def on_click_mostra_seleccio(self):
        """Aquesta es una funcio auxiliar que controla l'aparença d'alguns elements de la interficie"""
        llista_sel=self.dlg.ListaActivitatsDesc.selectedItems()
        llista_sel_EPIGRAF=self.dlg.ListaActivitatsEpigraf.selectedItems()
        llistat=""
        if (len(llista_sel)>0 or len(llista_sel_EPIGRAF)>0):
            for item in llista_sel:
                nom_desc="("+item.toolTip()+")-"+item.text()
                llistat=llistat+nom_desc+"\n"
            del llista_sel
            for item in llista_sel_EPIGRAF:
                num_epi="("+item.text()+")-"+item.toolTip()
                llistat=llistat+num_epi+"\n"
            del llista_sel_EPIGRAF
        QMessageBox.information(None, "Epigrafs seleccionats:",llistat )
    
    #@pyqtSlot()
    def on_click_totes(self):
        """Aquesta es una funcio auxiliar que controla l'aparença d'alguns elements de la interficie"""
        self.dlg.barraCerca.setText("")
        self.cercaDescripcio()

    #@pyqtSlot()
    def on_click_List(self):
        pass
    
    #@pyqtSlot()
    def on_click_ColorTopos(self):
        """Aquesta es una funcio auxiliar que controla l'aparença d'alguns elements de la interficie"""
        global micolor_Topo
        aux = QColorDialog.getColor()
        if (aux.isValid()):
           micolor_Topo=aux 
        estilo='border:1px solid #000000; background-color: '+micolor_Topo.name()
        self.dlg.ColorTopos.setStyleSheet(estilo)
        self.dlg.ColorTopos.setAutoFillBackground(True)

    
    #@pyqtSlot()
    def on_click_ColorZI(self):
        """Aquesta es una funcio auxiliar que controla l'aparença d'alguns elements de la interficie"""
        global micolor_ZI
        aux = QColorDialog.getColor()
        if (aux.isValid()):
           micolor_ZI=aux 
        estilo='border:1px solid #000000; background-color: '+micolor_ZI.name()
        self.dlg.ColorZI.setStyleSheet(estilo)
        self.dlg.ColorZI.setAutoFillBackground(True)
    
    def on_click_ColorGraf(self):
        """Aquesta es una funcio auxiliar que controla l'aparença d'alguns elements de la interficie"""
        global micolor_Graf
        aux = QColorDialog.getColor()
        if (aux.isValid()):
           micolor_Graf=aux 
        estilo='border:1px solid #000000; background-color: '+micolor_Graf.name()
        self.dlg.ColorGraf.setStyleSheet(estilo)
        self.dlg.ColorGraf.setAutoFillBackground(True)
    
    #@pyqtSlot()
    def on_click_Veure_ZI(self,state):
        """Aquesta es una funcio auxiliar que controla la visibilitat de diferents 
        elements de la interficie segons la opcio marcada"""
        if state == QtCore.Qt.Checked:
            self.dlg.Poblacio_panel.setVisible(True)
            self.dlg.VeureZI_panel.setVisible(True)
            if (self.dlg.parcela.isChecked()):
                self.dlg.ZIGraf_radio.setVisible(False)
            else:
                self.dlg.ZIGraf_radio.setVisible(True)
        else:
            self.dlg.VeureZI_panel.setVisible(False)
            self.dlg.Poblacio_panel.setVisible(False)

    def Canvia_label_ZI(self):
        """Aquesta es una funcio auxiliar que controla l'aparen�a d'alguns elements de la interficie"""
        if (self.dlg.GrafCombo.currentText()=="Distancia"):
            self.dlg.CostInvers_chk.setVisible(False)
            self.dlg.CostNusos.setVisible(False)
            self.dlg.label_5.setText('Distància (m)')
            self.dlg.Radi_ZI.setText('150')
            self.dlg.chk_calc_local.setEnabled(True)
            self.dlg.chk_calc_local.setChecked(True)
        else:
            self.dlg.label_5.setText('Temps (min)')
            self.dlg.Radi_ZI.setText('2')
            self.dlg.CostNusos.setChecked(False)
            self.dlg.CostNusos.setVisible(True)
            self.dlg.CostInvers_chk.setChecked(True)
            self.dlg.CostInvers_chk.setVisible(True)
            self.dlg.chk_calc_local.setEnabled(True)
            self.dlg.chk_calc_local.setChecked(True)
        return 0
    def on_Change_GrafCombo(self):
        """Aquesta es una funcio fa una crida a una funci� auxiliar"""
        self.Canvia_label_ZI()
        
    def on_Change_ComboGraf(self, state):
        """
        En el moment en que es modifica la opcio escollida 
        del combo o desplegable de la capa de punts,
        automaticament comprova els camps de la taula escollida.
        """
        try:
            capa=self.dlg.comboGraf.currentText()
            if capa != "":
                if capa != 'Selecciona una entitat':
                    if (self.grafValid(capa)):
                        pass
                    else:
                        QMessageBox.information(None, "Error", 'El graf seleccionat no té la capa de nusos corresponent.\nEscolliu un altre.')
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("Error Graf seleccionat")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error Graf seleccionat")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
            return "ERROR"
    
    def grafValid(self, taula):
        """Aquesta funció comprova si la taula que li hem passat té la seva capa de graf corresponent"""
        global cur
        global conn
        if taula != 'stretch':
            sql = "select exists (select 1 from geometry_columns where f_table_name = '" + taula + "_vertices_pgr')"
        else:
            sql = "select exists (select 1 from geometry_columns where f_table_name = '" + taula + f"_{Fitxer}_vertices_pgr')"
        cur.execute(sql)
        camp = cur.fetchall()
        return camp[0][0]
    
    
    def on_toggled_ZIGraf_radio(self,enabled):
        """Aquesta es una funcio auxiliar que controla la visibilitat de diferents 
        elements de la interficie segons la opcio marcada"""
        if enabled:
            self.dlg.ZIGraf_panel.setVisible(True)
            self.Canvia_label_ZI()
            if not(self.dlg.topo.isChecked()):
                self.dlg.Poblacio_panel.setVisible(True)
            else:
                self.dlg.Poblacio_panel.setVisible(True)
        else:
            self.dlg.ZIGraf_panel.setVisible(False)
            self.dlg.MostrarGraf_chk.setChecked(False)
            self.dlg.label_5.setText('Radi (m)')
            self.dlg.Radi_ZI.setText('150')

    def on_toggled_parcela(self,enabled):
        """Aquesta es una funcio auxiliar que controla la visibilitat de diferents 
        elements de la interficie segons la opcio marcada"""
        if enabled:
            self.dlg.CalculRadiTopos_panel.setVisible(False)
            self.dlg.ZIGraf_radio.setVisible(False)
            self.dlg.ZICirc_radio.setChecked(True)
        else:
            self.dlg.CalculRadiTopos_panel.setVisible(True)
            self.dlg.ZIGraf_radio.setVisible(True)

    def on_valuechange_Transparencia(self):
        """Aquesta es una funcio auxiliar que canvia el valor de la etiqueta associada a la transperencia de la capa escollida"""
        self.dlg.Transparencia_lbl.setText(str(self.dlg.Transparencia.value())+' %')

    def retorna_nom_geometria(self,mylayer):
        """Aquesta es una funcio auxiliar que comprova quin es el tipus de camp de geometria"""    
        if mylayer.wkbType()==Qgis.WKBPoint:
            print ('Layer is a pojnt layer')
        
        if mylayer.wkbType()==Qgis.WKBLineString:
            print ('Layer is a line layer')
        
        if mylayer.wkbType()==Qgis.WKBPolygon:
            print ('Layer is a polygon layer')
        
        if mylayer.wkbType()==Qgis.WKBMultiPolygon:
            print ('Layer is a multi-polygon layer')
        
        if mylayer.wkbType()==100:
            print ('Layer is a data-only layer')

    #@pyqtSlot()
    
    def calcul_graf(self,sql_buff):
        """Aquesta es una funcio auxiliar que retorna un sql amb el buffer"""
        global cur
        global conn
        global micolor_Topo
        global micolor_ZI
        global micolor_Graf
        global Fitxer
        global progress
        global geometria
#       *****************************************************************************************************************
#       INICI CREACIO DE LA TAULA 'XARXA_GRAF' I PREPARACIO DELS CAMPS COST I REVERSE_COST
#       *****************************************************************************************************************
        #XarxaCarrers = self.dlg.comboGraf.currentText()
        XarxaCarrers = f"stretch_{Fitxer}"
        sql_1="DROP TABLE IF EXISTS \"Xarxa_Graf_"+Fitxer+"\";\n"
        """ Es fa una copia de la taula que conte el graf i s'afegeixen els camps cost i reverse_cost en funcio del que es necessiti, es creara taula local temporal per evitar problemes de concurrencia"""
        sql_1+="CREATE LOCAL TEMP TABLE \"Xarxa_Graf_"+Fitxer+"\" as (SELECT * FROM \"" + XarxaCarrers + "\");\n"
        if (self.dlg.GrafCombo.currentText()=="Distancia"):
            """S'aplica com a cost tant directe com invers el valor de la longitud del segment"""
            sql_1+="UPDATE \"Xarxa_Graf_"+Fitxer+"\" set \"cost\"=st_length(\"geom\"), \"reverse_cost\"=st_length(\"geom\");\n"
        else:
            if (self.dlg.CostInvers_chk.isChecked()):
                """S'aplica com a 'cost' el valor del camp 'cost directe', i a 'reverse_cost' el valor del camp 'cost_invers"""
            else:
                """S'aplica com a 'cost' i 'reverse_cost' el valor del camp 'cost directe'"""
                sql_1+="UPDATE \"Xarxa_Graf_"+Fitxer+"\" set \"reverse_cost\"=\"cost\";\n"
            if (self.dlg.CostNusos.isChecked()):
                """Es suma al camp 'cost' i a 'reverse_cost' el valor dels semafors sempre i quan estigui la opci� marcada"""
                sql_1+="UPDATE \"Xarxa_Graf_"+Fitxer+"\" set \"cost\"=\"cost\"+(\"total_cost_semaphore\"), \"reverse_cost\"=\"reverse_cost\"+(\"total_cost_semaphore\");\n"
        #print sql_1
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("Error CREATE Xarxa_Graf")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error CREATE Xarxa_Graf")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
            return "ERROR"
#       *****************************************************************************************************************
#       FI CREACIO DE LA TAULA 'XARXA_GRAF' I PREPARACIO DELS CAMPS COST I REVERSE_COST
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI CREACIO DE LA TAULA 'PUNTS_INTERES_TMP' QUE CONTINDRA ELS PUNTS D'INTERES PROJECTATS SOBRE EL TRAM
#       *****************************************************************************************************************
        geometria="geom"
        sql_1="drop table if exists punts_interes_tmp_"+Fitxer+";\n"
        
        """Es crea la taula punts_interes_tmp" seleccionant el centroide de la entitat seleccionada, utilizant un radi fix"""
        sql_1+="CREATE LOCAL TEMPORARY TABLE punts_interes_tmp_"+Fitxer+" as (SELECT ST_Centroid(tmp.\""+geometria+"\") geom,tmp.\"ogc_fid\" as pid from ("+sql_buff+") tmp);\n"
        sql_1+="ALTER TABLE punts_interes_tmp_"+Fitxer+" ADD COLUMN     x FLOAT;\n"
        sql_1+="ALTER TABLE punts_interes_tmp_"+Fitxer+" ADD COLUMN     y FLOAT;\n"
        sql_1+="ALTER TABLE punts_interes_tmp_"+Fitxer+" ADD COLUMN     edge_id BIGINT;\n"
        sql_1+="ALTER TABLE punts_interes_tmp_"+Fitxer+" ADD COLUMN     side CHAR;\n"
        sql_1+="ALTER TABLE punts_interes_tmp_"+Fitxer+" ADD COLUMN     fraction FLOAT;\n"
        sql_1+="ALTER TABLE punts_interes_tmp_"+Fitxer+" ADD COLUMN     newPoint geometry;\n"

        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("Error CREATE punts_interes_temp")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error CREATE punts_interes_tmp")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
            return "ERROR"
#       *****************************************************************************************************************
#       FI CREACIO DE LA TAULA 'PUNTS_INTERES_TMP' QUE CONTINDRA ELS PUNTS D'INTERES PROJECTATS SOBRE EL TRAM
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI ASSIGNACIO DEL VALOR DEL TRAM MES PROPER AL CAMP 'EDGE_ID' DE LA TAULA 'PUNTS_INTERES_TMP I LA PROJECCIO DEL PUNT D'INTERES SOBRE EL TRAM
#       *****************************************************************************************************************
        """S'assigna el valor del tram més proper al punt d'interes en el camp 'edge_id' de la taula 'punts_interes_tmp'"""
        sql_1="UPDATE \"punts_interes_tmp_"+Fitxer+"\" set \"edge_id\"=tram_proper.\"tram_id\" from (SELECT distinct on(Poi.pid) Poi.pid As Punt_id,Sg.id as Tram_id, ST_Distance(Sg.geom,Poi.geom)  as dist FROM \"Xarxa_Graf_"+Fitxer+"\" as Sg,\"punts_interes_tmp_"+Fitxer+"\" AS Poi ORDER BY  Poi.pid,ST_Distance(Sg.geom,Poi.geom),Sg.id) tram_proper where \"punts_interes_tmp_"+Fitxer+"\".\"pid\"=tram_proper.\"punt_id\";\n"
        """Es calcula la fraccio del tram que on esta situat la projecci� del punt d'interes"""
        sql_1+="UPDATE \"punts_interes_tmp_"+Fitxer+"\" SET fraction = ST_LineLocatePoint(e.geom, \"punts_interes_tmp_"+Fitxer+"\".geom),newPoint = ST_LineInterpolatePoint(e.geom, ST_LineLocatePoint(e.geom, \"punts_interes_tmp_"+Fitxer+"\".geom)) FROM \"Xarxa_Graf_"+Fitxer+"\" AS e WHERE \"punts_interes_tmp_"+Fitxer+"\".\"edge_id\" = e.id;\n"
        """S'eliminen els valors nuls perquè es produeixen ja que alguns objectes de la taula no tenen CarrerNumBis per problemes amb el padró i això acabarà donant error"""
        sql_1+="DELETE FROM \"punts_interes_tmp_"+Fitxer+"\" WHERE \"fraction\" IS NULL OR \"newpoint\" IS NULL OR \"geom\" IS NULL;\n"
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("Error UPDATE punts_interes_temp")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error UPDATE punts_interes_tmp")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
            return "ERROR"
#       *****************************************************************************************************************
#       FI ASSIGNACIO DEL VALOR DEL TRAM MES PROPER AL CAMP 'EDGE_ID' DE LA TAULA 'PUNTS_INTERES_TMP 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI DE LA CREACIO DE LA TAULA 'TBL_PUNTS_FINALS_TMP' QUE CONTINDRA ELS ID DELS NODES DE LA XARXA QUE SON A DINS DEL RADI 
#       *****************************************************************************************************************
        sql_1="DROP FUNCTION IF EXISTS Cobertura_"+Fitxer+"();\n"
        sql_1+="DROP TABLE IF EXISTS tbl_punts_finals_tmp_"+Fitxer+";\n"

        """Creació de la taula 'tbl_punts_finals_tmp' on es tindrà tots els nodes de la xarxa que son a dins del radi fix d'acci� indicat"""
        sql_1+="CREATE local temporary TABLE tbl_punts_finals_tmp_"+Fitxer+" AS(SELECT node,agg_cost,start_vid FROM pgr_withPointsDD('SELECT id, source, target, cost, reverse_cost FROM \"Xarxa_Graf_"+Fitxer+"\" ORDER BY \"Xarxa_Graf_"+Fitxer+"\".id','SELECT (pid::integer) as pid, edge_id, fraction, side from \"punts_interes_tmp_"+Fitxer+"\"',array(select (\"pid\"::integer)*(-1) from \"punts_interes_tmp_"+Fitxer+"\"),"+self.dlg.Radi_ZI.text()+",driving_side := 'b',details := false));\n"
        
        try:
            cur.execute(sql_1)
            conn.commit()
            
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("CREATE tbl_punts_finals_tmp TABLE ERROR")
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", "CREATE tbl_punts_finals_tmp TABLE ERROR")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
            return "ERROR"

#       *****************************************************************************************************************
#       FI DE LA CREACIO DE LA TAULA 'TBL_PUNTS_FINALS_TMP' QUE CONTINDRA ELS ID DELS NODES DE LA XARXA QUE SON A DINS DEL RADI 
#       *****************************************************************************************************************
#       *****************************************************************************************************************
#       INICI DE LA CREACIO DE LA TAULA 'GEO_PUNTS_FINALS_TMP' QUE CONTINDRA ELS NODES DE LA XARXA QUE SON A DINS DEL RADI 
#       *****************************************************************************************************************

        sql_1="DROP table if exists geo_punts_finals_tmp_"+Fitxer+";\n"
        """Creació de la taula 'geo_punts_finals_tmp' on estan tots els nodes de la xarxa que son a dins del radi fix amb la geometria inclosa"""
        sql_1+="CREATE local temporary TABLE geo_punts_finals_tmp_"+Fitxer+" as (select \"" + XarxaCarrers + "_vertices_pgr\".*,\"tbl_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\", \"tbl_punts_finals_tmp_"+Fitxer+"\".\"start_vid\", "+self.dlg.Radi_ZI.text()+" from \"" + XarxaCarrers + "_vertices_pgr\",\"tbl_punts_finals_tmp_"+Fitxer+"\" where \"" + XarxaCarrers + "_vertices_pgr\".\"id\" =\"tbl_punts_finals_tmp_"+Fitxer+"\".\"node\" order by \"tbl_punts_finals_tmp_"+Fitxer+"\".\"start_vid\" desc,\"tbl_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\");\n"

        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("CREATE geo_punts_finals_tmp TABLE ERROR")
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", "CREATE geo_punts_finals_tmp TABLE ERROR")
            conn.rollback()

            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
                            
            return "ERROR"
        
#       *****************************************************************************************************************
#       FI DE LA CREACIO DE LA TAULA 'GEO_PUNTS_FINALS_TMP' QUE CONTINDRA ELS NODES DE LA XARXA QUE SON A DINS DEL RADI 
#       *****************************************************************************************************************
            
#       *****************************************************************************************************************
#       INICI DE LA CREACIO DE LA TAULA 'TRAMS_FINALS_TMP' QUE CONTINDRA ELS TRAMS QUE FORMEN PART DEL RADI D'ACCIO INDICAT 
#       *****************************************************************************************************************

        sql_1="DROP table IF EXISTS trams_finals_tmp_"+Fitxer+";\n"
        if (self.dlg.GrafCombo.currentText()=="Distancia"):
            """Si s'ha escollit calcula mitjançant distancia """
            """Creació de la taula que contindrà els trams que formen part del radi d'acció indicat, si el radi escollit es un radi fix"""
            sql_1+="CREATE local temporary TABLE trams_finals_tmp_"+Fitxer+" as (select \"Xarxa_Graf_"+Fitxer+"\".\"id\",\"Xarxa_Graf_"+Fitxer+"\".\"geom\",\"geo_punts_finals_tmp_"+Fitxer+"\".\"id\" as node,\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\" as coste,("+self.dlg.Radi_ZI.text()+"-\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\") as falta,\"geo_punts_finals_tmp_"+Fitxer+"\".\"start_vid\" as id_punt, (select case when ("+self.dlg.Radi_ZI.text()+"-\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\")/ST_Length(\"Xarxa_Graf_"+Fitxer+"\".\"geom\")<=1 then ("+self.dlg.Radi_ZI.text()+"-\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\")/ST_Length(\"Xarxa_Graf_"+Fitxer+"\".\"geom\") when ("+self.dlg.Radi_ZI.text()+"-\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\")/ST_Length(\"Xarxa_Graf_"+Fitxer+"\".\"geom\")>1 then (1) end) as fraccio from \"Xarxa_Graf_"+Fitxer+"\",\"geo_punts_finals_tmp_"+Fitxer+"\" where ST_DWithin(\"geo_punts_finals_tmp_"+Fitxer+"\".\"the_geom\",\"Xarxa_Graf_"+Fitxer+"\".\"geom\",1)=TRUE);\n"
        else:
            """Si s'ha escollit calcula mitjançant Temps """
            if (self.dlg.CostInvers_chk.isChecked()):
                """Creació de la taula que contindrà els trams que formen part del radi d'acció indicat, si el radi escollit es un radi fix"""
                sql_1+="CREATE local temporary TABLE trams_finals_tmp_"+Fitxer+" as (select \"Xarxa_Graf_"+Fitxer+"\".\"id\",\"Xarxa_Graf_"+Fitxer+"\".\"cost\",\"Xarxa_Graf_"+Fitxer+"\".\"reverse_cost\",\"Xarxa_Graf_"+Fitxer+"\".\"geom\",\"geo_punts_finals_tmp_"+Fitxer+"\".\"id\" as node,\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\" as coste,("+self.dlg.Radi_ZI.text()+"-\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\") as falta,\"geo_punts_finals_tmp_"+Fitxer+"\".\"start_vid\" as id_punt, (select case when (("+self.dlg.Radi_ZI.text()+"-\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\")/(CASE WHEN \"geo_punts_finals_tmp_"+Fitxer+"\".\"id\"=\"Xarxa_Graf_"+Fitxer+"\".\"target\" THEN \"Xarxa_Graf_"+Fitxer+"\".\"reverse_cost\" ELSE \"Xarxa_Graf_"+Fitxer+"\".\"cost\" END))<=1 then (("+self.dlg.Radi_ZI.text()+"-\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\")/(CASE WHEN \"geo_punts_finals_tmp_"+Fitxer+"\".\"id\"=\"Xarxa_Graf_"+Fitxer+"\".\"target\" THEN \"Xarxa_Graf_"+Fitxer+"\".\"reverse_cost\" ELSE \"Xarxa_Graf_"+Fitxer+"\".\"cost\" END)) when (("+self.dlg.Radi_ZI.text()+"-\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\")/(CASE WHEN \"geo_punts_finals_tmp_"+Fitxer+"\".\"id\"=\"Xarxa_Graf_"+Fitxer+"\".\"target\" THEN \"Xarxa_Graf_"+Fitxer+"\".\"reverse_cost\" ELSE \"Xarxa_Graf_"+Fitxer+"\".\"cost\" END))>1 then (1) end) as fraccio from \"Xarxa_Graf_"+Fitxer+"\",\"geo_punts_finals_tmp_"+Fitxer+"\" where ST_DWithin(\"geo_punts_finals_tmp_"+Fitxer+"\".\"the_geom\",\"Xarxa_Graf_"+Fitxer+"\".\"geom\",1)=TRUE);\n"
            else:
                """Creació de la taula que contindrà els trams que formen part del radi d'acció indicat, si el radi escollit es un radi fix"""
                sql_1+="CREATE local temporary TABLE trams_finals_tmp_"+Fitxer+" as (select \"Xarxa_Graf_"+Fitxer+"\".\"id\",\"Xarxa_Graf_"+Fitxer+"\".\"cost\",\"Xarxa_Graf_"+Fitxer+"\".\"reverse_cost\",\"Xarxa_Graf_"+Fitxer+"\".\"geom\",\"geo_punts_finals_tmp_"+Fitxer+"\".\"id\" as node,\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\" as coste,("+self.dlg.Radi_ZI.text()+"-\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\") as falta,\"geo_punts_finals_tmp_"+Fitxer+"\".\"start_vid\" as id_punt, (select case when (("+self.dlg.Radi_ZI.text()+"-\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\")/(\"Xarxa_Graf_"+Fitxer+"\".\"cost\"))<=1 then (("+self.dlg.Radi_ZI.text()+"-\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\")/(\"Xarxa_Graf_"+Fitxer+"\".\"cost\")) when (("+self.dlg.Radi_ZI.text()+"-\"geo_punts_finals_tmp_"+Fitxer+"\".\"agg_cost\")/(\"Xarxa_Graf_"+Fitxer+"\".\"cost\"))>1 then (1) end) as fraccio from \"Xarxa_Graf_"+Fitxer+"\",\"geo_punts_finals_tmp_"+Fitxer+"\" where ST_DWithin(\"geo_punts_finals_tmp_"+Fitxer+"\".\"the_geom\",\"Xarxa_Graf_"+Fitxer+"\".\"geom\",1)=TRUE);\n"
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("CREATE trams_finals_tmp TABLE ERROR")
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", "CREATE trams_finals_tmp TABLE ERROR")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
            return "ERROR"        
        
#       *****************************************************************************************************************
#       FI DE LA CREACIO DE LA TAULA 'TRAMS_FINALS_TMP' QUE CONTINDRA ELS TRAMS QUE FORMEN PART DEL RADI D'ACCIO INDICAT 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI FUNCIO PER CREAR ELS TRAMS FINALS AMB LA FRACCIO DE TRAM QUE LI CORRESPON 
#       *****************************************************************************************************************

        sql_1="DROP FUNCTION IF EXISTS Cobertura_"+Fitxer+"();\n"
        sql_1+="CREATE OR REPLACE FUNCTION Cobertura_"+Fitxer+"() RETURNS SETOF trams_finals_tmp_"+Fitxer+" AS\n"
        sql_1+="$BODY$\n"
        sql_1+="DECLARE\n"
        sql_1+="r trams_finals_tmp_"+Fitxer+"%rowtype;\n"
        sql_1+="m trams_finals_tmp_"+Fitxer+"%rowtype;\n"
        sql_1+="BEGIN\n"
        sql_1+="DROP TABLE IF EXISTS fraccio_trams_raw_"+Fitxer+";\n"
        sql_1+="CREATE local temporary TABLE fraccio_trams_raw_"+Fitxer+" (geom geometry, punt_id bigint,id_tram bigint,fraccio FLOAT,node bigint,fraccio_inicial FLOAT,cost_invers FLOAT,cost_directe FLOAT,target bigint,radi_inic FLOAT);\n"
        sql_1+="FOR r IN SELECT \"trams_finals_tmp_"+Fitxer+"\".* FROM \"trams_finals_tmp_"+Fitxer+"\" WHERE \"trams_finals_tmp_"+Fitxer+"\".\"id\" not in (select \"edge_id\" from \"punts_interes_tmp_"+Fitxer+"\")\n"
        sql_1+="LOOP\n"
        sql_1+="insert into fraccio_trams_raw_"+Fitxer+" VALUES(ST_LineSubstring((r.\"geom\"),"
        sql_1+="case when (select ST_LineLocatePoint((r.\"geom\"),(select \"geo_punts_finals_tmp_"+Fitxer+"\".\"the_geom\" from \"geo_punts_finals_tmp_"+Fitxer+"\" where \"geo_punts_finals_tmp_"+Fitxer+"\".\"id\"=r.\"node\" and \"geo_punts_finals_tmp_"+Fitxer+"\".\"start_vid\"=r.\"id_punt\")))<0.001 then 0 else 1-r.\"fraccio\"\n"
        sql_1+="END,\n"
        sql_1+="case when (select ST_LineLocatePoint((r.\"geom\"),(select \"geo_punts_finals_tmp_"+Fitxer+"\".\"the_geom\" from \"geo_punts_finals_tmp_"+Fitxer+"\" where \"geo_punts_finals_tmp_"+Fitxer+"\".\"id\"=r.\"node\" and \"geo_punts_finals_tmp_"+Fitxer+"\".\"start_vid\"=r.\"id_punt\")))<0.001 then r.\"fraccio\" else 1\n"
        sql_1+="END),r.\"id_punt\"*(-1),r.\"id\",0,r.\"node\",0,0,0,0);\n"
        sql_1+="RETURN NEXT r;\n"
        sql_1+="END LOOP;\n"

        sql_1+="FOR m IN SELECT \"trams_finals_tmp_"+Fitxer+"\".* FROM \"trams_finals_tmp_"+Fitxer+"\" WHERE \"trams_finals_tmp_"+Fitxer+"\".\"id\" in (select \"edge_id\" from \"punts_interes_tmp_"+Fitxer+"\")\n"
        sql_1+="LOOP\n"
        sql_1+="insert into fraccio_trams_raw_"+Fitxer+" VALUES(m.\"geom\",m.\"id_punt\"*(-1),m.\"id\",0,m.\"node\",0,0,0);\n"

        sql_1+="RETURN NEXT m;\n"
        sql_1+="END LOOP;\n"

        sql_1+="RETURN;\n"
        sql_1+="END\n"
        sql_1+="$BODY$\n"
        sql_1+="LANGUAGE 'plpgsql' ;\n"
        
        sql_1+="SELECT \"geom\" FROM Cobertura_"+Fitxer+"();\n"

        progress.setValue(45)
        self.dlg.Progres.setValue(45)
        QApplication.processEvents()

        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("Select Cobertura ERROR")
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", "Select Cobertura ERROR")
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
                            
            return "ERROR"
            
        sql_1="DROP FUNCTION IF EXISTS Cobertura_"+Fitxer+"();\n"
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("Error DROP Cobertura")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error DROP Cobertura")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
            return "ERROR"
        
#       *****************************************************************************************************************
#       FI FUNCIO PER CREAR ELS TRAMS FINALS AMB LA FRACCIO DE TRAM QUE LI CORRESPON 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI ACTUALITZACIO DE LA FRACCIO DELS TRAMS INICIALS 
#       *****************************************************************************************************************

        """Actualitzacio de la fraccio dels trams inicials"""
        sql_1="update \"fraccio_trams_raw_"+Fitxer+"\" set \"fraccio_inicial\"=\"punts_interes_tmp_"+Fitxer+"\".\"fraction\" from \"punts_interes_tmp_"+Fitxer+"\" where \"id_tram\"=\"edge_id\""
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("UPDATE fraccio_trams_raw TABLE ERROR")
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", "UPDATE fraccio_trams_raw TABLE ERROR")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
                            
            return "ERROR"   

#       *****************************************************************************************************************
#       FI ACTUALITZACIO DE LA FRACCIO DELS TRAMS INICIALS 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI ACTUALITZACIO DELS VALORS DE COST DIRECTE, TARGET, COST INVERS DELS TRAMS INICIALS 
#       *****************************************************************************************************************

        """Actualitzacio dels valors de cost directe, target, cost invers dels trams inicials"""
        sql_1="update \"fraccio_trams_raw_"+Fitxer+"\" set \"cost_directe\"=\"Xarxa_Graf_"+Fitxer+"\".\"cost\",\"target\"=\"Xarxa_Graf_"+Fitxer+"\".\"target\",\"cost_invers\"=\"Xarxa_Graf_"+Fitxer+"\".\"reverse_cost\" from \"Xarxa_Graf_"+Fitxer+"\" where \"id_tram\"=\"id\""

        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("UPDATE 2 fraccio_trams_raw TABLE ERROR 2")
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", "UPDATE 2 fraccio_trams_raw TABLE ERROR")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
                            
            return "ERROR"        

#       *****************************************************************************************************************
#       FI ACTUALITZACIO DELS VALORS DE COST DIRECTE, TARGET, COST INVERS DELS TRAMS INICIALS 
#       *****************************************************************************************************************

#               
#       *****************************************************************************************************************
#       INICI CALCUL DE LA FRACCIO DE CADA TRAM FINAL 
#       *****************************************************************************************************************

        if (self.dlg.GrafCombo.currentText()!="Distancia"):
            """Calcul del la fracci� final de cada tram en el cas d'haber escollit temps"""
            cost_tram="(CASE WHEN \"geo_punts_finals_tmp_"+Fitxer+"\".\"id\"=\"fraccio_trams_raw_"+Fitxer+"\".\"target\" THEN \"fraccio_trams_raw_"+Fitxer+"\".\"cost_invers\" ELSE \"fraccio_trams_raw_"+Fitxer+"\".\"cost_directe\" END)"
            where_tram=" FROM \"geo_punts_finals_tmp_"+Fitxer+"\" WHERE ST_DWithin(\"geo_punts_finals_tmp_"+Fitxer+"\".\"the_geom\",\"fraccio_trams_raw_"+Fitxer+"\".\"geom\",1)=TRUE"
            sql_1="UPDATE \"fraccio_trams_raw_"+Fitxer+"\" SET \"fraccio\"=" 

            """ Si el radi es fix"""
            sql_1+="((case when (\"fraccio_trams_raw_"+Fitxer+"\".\"fraccio_inicial\"*"+cost_tram+")>"+self.dlg.Radi_ZI.text()+" then ("+self.dlg.Radi_ZI.text()+"/"+cost_tram+") else \"fraccio_trams_raw_"+Fitxer+"\".\"fraccio_inicial\" end)"
            sql_1+="+"
            sql_1+="(case when ((1-\"fraccio_trams_raw_"+Fitxer+"\".\"fraccio_inicial\")*"+cost_tram+")>"+self.dlg.Radi_ZI.text()+" then ("+self.dlg.Radi_ZI.text()+"/"+cost_tram+") else (1-\"fraccio_trams_raw_"+Fitxer+"\".\"fraccio_inicial\") end))"
            sql_1+=where_tram+";\n"
        else:
            """Calcul del la fracci� final de cada tram en el cas d'haber escollit distancia"""
            cost_tram="ST_Length(\"fraccio_trams_raw_"+Fitxer+"\".\"geom\")"
            where_tram=""
            sql_1="UPDATE \"fraccio_trams_raw_"+Fitxer+"\" SET \"fraccio\"=" 
            """ Si el radi es fix"""
            sql_1+="((case when (\"fraccio_trams_raw_"+Fitxer+"\".\"fraccio_inicial\"*"+cost_tram+")>"+self.dlg.Radi_ZI.text()+" then ("+self.dlg.Radi_ZI.text()+"/"+cost_tram+") else \"fraccio_trams_raw_"+Fitxer+"\".\"fraccio_inicial\" end)"
            sql_1+="+"
            sql_1+="(case when ((1-\"fraccio_trams_raw_"+Fitxer+"\".\"fraccio_inicial\")*"+cost_tram+")>"+self.dlg.Radi_ZI.text()+" then ("+self.dlg.Radi_ZI.text()+"/"+cost_tram+") else (1-\"fraccio_trams_raw_"+Fitxer+"\".\"fraccio_inicial\") end))"
            sql_1+=where_tram+";\n"
        
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("UPDATE 4 fraccio_trams_raw TABLE ERROR")
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", "UPDATE 4 fraccio_trams_raw TABLE ERROR")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
                            
            return "ERROR"        

#       *****************************************************************************************************************
#       FI CALCUL DE LA FRACCIO DE CADA TRAM FINAL 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI MODIFICACIO DE LA GEOMETRIA DELS TRAMS FINALS SEGONS LA FRACCIO CALCULADA 
#       *****************************************************************************************************************

        """Es modifiquen els trams finals del trajecte segons el que falti per arribar al cost desitjat"""
        sql_1="update \"fraccio_trams_raw_"+Fitxer+"\" set \"geom\"=final.\"geom\"" 
        sql_1+="from"
        sql_1+="(select distinct(ST_LineSubstring("
        sql_1+="(m.\"geom\")"
        sql_1+=","
        sql_1+="(case when (select ST_LineLocatePoint((m.\"geom\"),(select \"the_geom\" from \"geo_punts_finals_tmp_"+Fitxer+"\" where \"geo_punts_finals_tmp_"+Fitxer+"\".\"id\"=m.\"node\" and \"geo_punts_finals_tmp_"+Fitxer+"\".\"start_vid\"=m.\"punt_id\"*-1)))<0.01 then 0 else 1-m.\"fraccio\" END)"
        sql_1+=","
        sql_1+="(case when (select ST_LineLocatePoint((m.\"geom\"),(select \"the_geom\" from \"geo_punts_finals_tmp_"+Fitxer+"\" where \"geo_punts_finals_tmp_"+Fitxer+"\".\"id\"=m.\"node\" and \"geo_punts_finals_tmp_"+Fitxer+"\".\"start_vid\"=m.\"punt_id\"*-1)))<0.01 then m.\"fraccio\" else 1 END)"
        sql_1+="))  geom"
        sql_1+=","
        sql_1+="m.\"id_tram\""
        sql_1+="from \"fraccio_trams_raw_"+Fitxer+"\" m "
        sql_1+="where m.\"id_tram\" in (select \"edge_id\" from \"punts_interes_tmp_"+Fitxer+"\")) final "
        sql_1+="where final.\"id_tram\" =\"fraccio_trams_raw_"+Fitxer+"\".\"id_tram\";\n"
        progress.setValue(55)
        self.dlg.Progres.setValue(55)
        QApplication.processEvents()
        
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("UPDATE 5 fraccio_trams_raw TABLE ERROR")
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", "UPDATE 5 fraccio_trams_raw TABLE ERROR")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
                            
            return "ERROR"       
    
#       *****************************************************************************************************************
#       FI MODIFICACIO DE LA GEOMETRIA DELS TRAMS FINALS SEGONS LA FRACCIO CALCULADA 
#       *****************************************************************************************************************
        
#       *****************************************************************************************************************
#       INICI INSERTAR ELS TRAMS INICIALS DELS QUE PARTIRA EL GRAF 
#       *****************************************************************************************************************

        """S'afegeixen els trams inicials de cada graf per modificarlos posteriorment"""
        sql_1="insert into \"fraccio_trams_raw_"+Fitxer+"\" (select SX.\"geom\",PI.\"pid\" as punt_id,SX.\"id\"as id_tram,999 as fraccio,SX.\"source\" as node,PI.\"fraction\" as fraccio_inicial,SX.\"cost\",SX.\"reverse_cost\" from \"Xarxa_Graf_"+Fitxer+"\" SX inner join (Select \"edge_id\",(\"pid\"::integer) as pid,\"fraction\" from \"punts_interes_tmp_"+Fitxer+"\") PI on SX.\"id\"=PI.\"edge_id\");\n"
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("INSERT fraccio_trams_raw TABLE ERROR")
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", "INSERT fraccio_trams_raw TABLE ERROR")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
                            
            return "ERROR"        
        
#       *****************************************************************************************************************
#       FI INSERTAR ELS TRAMS INICIALS DELS QUE PARTIRA EL GRAF 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI MODIFICACIO DELS TRAMS INICIALS EN EL CAS QUE LA DISTANCIA A RECORRER SIGUI MES PETITA QUE EL PROPI TRAM 
#       *****************************************************************************************************************

        if (self.dlg.GrafCombo.currentText()=="Distancia"):
            """ Calcul amb distancia i radi variable"""

            """ Calcul amb distancia i radi fix"""
            cost_tram="ST_Length(SXI.\"geom\")"
            sql_1="UPDATE \"fraccio_trams_raw_"+Fitxer+"\" set \"geom\"=final.\"geom\" from (select ST_LineSubstring((SXI.\"geom\"),"
            sql_1+="(case when (FT.\"fraccio_inicial\"-("+self.dlg.Radi_ZI.text()+"/"+cost_tram+"))>0 then (FT.\"fraccio_inicial\"-("+self.dlg.Radi_ZI.text()+"/"+cost_tram+")) else 0 end)"
            sql_1+=","
            sql_1+="(case when (FT.\"fraccio_inicial\"+("+self.dlg.Radi_ZI.text()+"/"+cost_tram+"))<1 then (FT.\"fraccio_inicial\"+("+self.dlg.Radi_ZI.text()+"/"+cost_tram+")) else 1 end)"
            sql_1+=") as geom, FT.\"punt_id\",FT.\"id_tram\",FT.\"fraccio\" "
            sql_1+="from \"fraccio_trams_raw_"+Fitxer+"\"FT inner join (select SX.\"geom\" as geom,SX.\"id\" as tram_xarxa from \"Xarxa_Graf_"+Fitxer+"\" SX, \"punts_interes_tmp_"+Fitxer+"\" PI where SX.\"id\"=PI.\"edge_id\") SXI on FT.\"id_tram\"=SXI.tram_xarxa where FT.\"fraccio\"=999) final"
            sql_1+=" where \"fraccio_trams_raw_"+Fitxer+"\".\"punt_id\"=final.\"punt_id\" and \"fraccio_trams_raw_"+Fitxer+"\".\"fraccio\"=999;\n"
        else:
            """ Calcul amb temps i radi variable"""
            
            """ Calcul amb temps i radi fix"""
            sql_1="UPDATE \"fraccio_trams_raw_"+Fitxer+"\" set \"geom\"=final.\"geom\" from "
            sql_1+="(select ST_Union(TOT.geom) geom,TOT.\"punt_id\" from (select ST_LineSubstring((SXI.\"geom\"),"
            sql_1+="(case when (FT.\"fraccio_inicial\"-("+self.dlg.Radi_ZI.text()+"/(FT.\"cost_invers\")))>0 then (FT.\"fraccio_inicial\"-("+self.dlg.Radi_ZI.text()+"/(FT.\"cost_invers\"))) else 0 end)"
            sql_1+=","
            sql_1+="FT.\"fraccio_inicial\""
            sql_1+=") as geom, FT.\"punt_id\" "
            sql_1+="from \"fraccio_trams_raw_"+Fitxer+"\"FT inner join (select SX.\"geom\" as geom,SX.\"id\" as tram_xarxa from \"Xarxa_Graf_"+Fitxer+"\" SX, \"punts_interes_tmp_"+Fitxer+"\" PI where SX.\"id\"=PI.\"edge_id\") SXI on FT.\"id_tram\"=SXI.tram_xarxa where FT.\"fraccio\"=999"
            sql_1+="UNION "
            sql_1+="select ST_LineSubstring((SXI.\"geom\"),"
            sql_1+="FT.\"fraccio_inicial\""
            sql_1+=","
            sql_1+="(case when (FT.\"fraccio_inicial\"+("+self.dlg.Radi_ZI.text()+"/(FT.\"cost_directe\")))<1 then (FT.\"fraccio_inicial\"+("+self.dlg.Radi_ZI.text()+"/(FT.\"cost_directe\"))) else 1 end)"
            sql_1+=") as geom, FT.\"punt_id\" "
            sql_1+="from \"fraccio_trams_raw_"+Fitxer+"\"FT inner join (select SX.\"geom\" as geom,SX.\"id\" as tram_xarxa from \"Xarxa_Graf_"+Fitxer+"\" SX, \"punts_interes_tmp_"+Fitxer+"\" PI where SX.\"id\"=PI.\"edge_id\") SXI on FT.\"id_tram\"=SXI.tram_xarxa where FT.\"fraccio\"=999) TOT GROUP BY TOT.\"punt_id\") final"
            sql_1+=" where \"fraccio_trams_raw_"+Fitxer+"\".\"punt_id\"=final.\"punt_id\" and \"fraccio_trams_raw_"+Fitxer+"\".\"fraccio\"=999;\n"
        
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("UPDATE 8 fraccio_trams_raw TABLE ERROR")
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", "UPDATE 8 fraccio_trams_raw TABLE ERROR")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
                            
            return "ERROR"   

#       *****************************************************************************************************************
#       FI MODIFICACIO DELS TRAMS INICIALS EN EL CAS QUE LA DISTANCIA A RECORRER SIGUI MES PETITA QUE EL PROPI TRAM 
#       *****************************************************************************************************************


#       *****************************************************************************************************************
#       INICI CREACIO TAULA FRACCIO_TRAMS_TMP I ELIMINACIO DE TRAMS DUPLICATS 
#       *****************************************************************************************************************

        sql_1="DROP TABLE IF EXISTS fraccio_trams_tmp_"+Fitxer+";\n"

        """Eliminaci� de trams duplicats"""
        sql_1+="CREATE local temporary TABLE fraccio_trams_tmp_"+Fitxer+" AS (select distinct(geom),punt_id,radi_inic from fraccio_trams_raw_"+Fitxer+");\n"
        
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("CREATE fraccio_trams_tmp TABLE ERROR")
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", "CREATE fraccio_trams_tmp TABLE ERROR")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
                            
            return "ERROR"        
#       *****************************************************************************************************************
#       FI CREACIO TAULA FRACCIO_TRAMS_TMP I ELIMINACIO DE TRAMS DUPLICATS 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI CREACIO TAULA GRAF_UTILITZAT_(DATA) QUE CONTINDRA ELS TRAMS UNITS DEL GRAF 
#       *****************************************************************************************************************
        """ Es fa la uni� de tots els trams des del servidor POSTGRES dins de la taula Graf_utilitzat_(data)"""
        sql_1="drop table if exists Graf_utilitzat_"+Fitxer+";\n"
        sql_1+="CREATE TABLE Graf_utilitzat_"+Fitxer+" AS (Select ST_Union(TOT.geom) geom, TOT.\"punt_id\" as id from (select geom,punt_id,radi_inic from fraccio_trams_tmp_"+Fitxer+") TOT group by TOT.\"punt_id\");\n"
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("CREATE Graf_utilitzat_ TABLE ERROR")
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", "CREATE Graf_utilitzat_ TABLE ERROR")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
                            
            return "ERROR"  
        
#       *****************************************************************************************************************
#       FI CREACIO TAULA GRAF_UTILITZAT_(DATA) QUE CONTINDRA ELS TRAMS UNITS DEL GRAF 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI CREACIO TAULA BUFFER_FINAL_(DATA) QUE CONTINDRA EL BUFFER DE LA UNIO DELS TRAMS 
#       *****************************************************************************************************************

        sql_1+="drop table if exists \"Buffer_Final_"+Fitxer+"\";\n"
        sql_1+="CREATE TABLE \"Buffer_Final_"+Fitxer+"\" AS (Select ST_Union(TOT.geom) geom, TOT.\"punt_id\" from (Select ST_Buffer(geom,"+self.dlg.Radi_ZI_3.text()+") geom,punt_id from fraccio_trams_tmp_"+Fitxer+")TOT group by TOT.\"punt_id\");\n"
            
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("CREATE Buffer_Final TABLE ERROR")
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", "CREATE Buffer_Final TABLE ERROR")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
                            
            return "ERROR"
        
#       *****************************************************************************************************************
#       FI CREACIO TAULA BUFFER_FINAL_(DATA) QUE CONTINDRA EL BUFFER DE LA UNIO DELS TRAMS 
#       *****************************************************************************************************************

        try:
            if not(self.dlg.MostrarGraf_chk.isChecked()):
                sql_1="drop table if exists Graf_utilitzat_"+Fitxer+";\n"
                cur.execute(sql_1)
                conn.commit()
            sql_total="SELECT * FROM \"Buffer_Final_"+Fitxer+"\""
            return sql_total
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print ("Error DROP Graf_utilitzat")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error DROP Graf_utilitzat")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
            return "ERROR"

    def calcul_graf2(self,sql_punts,sql_xarxa,uri2):
        #               *****************************************************************************************************************
        #               INICI CARREGA DE LES zone_{Fitxer}, PARCELES O PORTALS QUE QUEDEN AFECTATS PEL BUFFER DEL GRAF 
        #               *****************************************************************************************************************
        #                uri.setDataSource("","("+sql_total+")","geom","","id")
        
        QApplication.processEvents()
        uri2.setDataSource("","("+sql_punts+")","geom","","id")
        QApplication.processEvents()
        punts_lyr = QgsVectorLayer(uri2.uri(False), "punts", "postgres")
        QApplication.processEvents()
        uri2.setDataSource("","("+sql_xarxa+")","geom","","id")
        QApplication.processEvents()
        network_lyr = QgsVectorLayer(uri2.uri(False), "xarxa", "postgres")
        QApplication.processEvents()

        parameters = {'INPUT': network_lyr,
                      'START_POINTS': punts_lyr,
                      'STRATEGY': 0,
                      'TRAVEL_COST':self.dlg.Radi_ZI.text(),
                      'DIRECTION_FIELD': '',
                      'VALUE_FORWARD': '',
                      'VALUE_BACKWARD': '',
                      'VALUE_BOTH': '',
                      'DEFAULT_DIRECTION': 2,
                      'SPEED_FIELD': '',
                      'DEFAULT_SPEED': 1,
                      'TOLERANCE': 0,
                      'INCLUDE_BOUNDS': 0,
                      'OUTPUT_LINES': 'memory:',
                      'OUTPUT': 'memory:'}
        
        linias_graf = processing.run('qgis:serviceareafromlayer', parameters)

        result_dissolve = processing.run('native:dissolve', {"INPUT": linias_graf['OUTPUT_LINES'],
                                                             "FIELD": 'id',
                                                             "OUTPUT": 'memory:'})        
        result_singleparts = processing.run('native:multiparttosingleparts', {"INPUT": linias_graf['OUTPUT_LINES'],
                                                                              "OUTPUT": 'memory:'})
        result_buffer = processing.run('native:buffer', {"INPUT": result_singleparts['OUTPUT'],
                                                         "DISTANCE": 20,
                                                         "SEGMENTS": 5,
                                                         "END_CAP_STYLE":0,
                                                         "JOIN_STYLE":0,
                                                         "MITER_LIMIT":1,
                                                         "DISSOLVE":0,
                                                         "OUTPUT": 'memory:'})
        result_buffer_dissolve = processing.run('native:dissolve', {"INPUT": result_buffer['OUTPUT'],
                                                                    "FIELD": 'id',
                                                                    "OUTPUT": 'memory:'})
        return result_buffer_dissolve,result_dissolve

    def troba_distancia(self,linea,punt):
        distancia=linea.geometry().lineLocatePoint(punt.geometry())
        return distancia
    def troba_posicio(self,id,llista_id):
        resultat=[]
        for j,x in enumerate(llista_id):
            if id==x:
                resultat.append(j)
        return resultat
        
    def calcula_distancies(self,linea,posicio,punts):
        resultat=[]
        for i in range(len(posicio)):
            resultat.append([posicio[i],self.troba_distancia(linea,punts[posicio[i]])])
        resultat=sorted(resultat, key=lambda x: x[1])
        return resultat
    
    def Calcula_VEL_KMH(self,xarxa,crs,uri):
         # Invertir dirección de línea
        alg_params = {
        'INPUT': xarxa,
        'OUTPUT': 'memory:'
        }
        outputs={}
        outputs['InvertirDireccinDeLnea'] = processing.run('native:reverselinedirection', alg_params)
        
        if (self.dlg.CostInvers_chk.isChecked()):

            # VEL_PS=0
            alg_params = {
                'FIELD_LENGTH': 10,
                'FIELD_NAME': 'speed',
                'FIELD_PRECISION': 9,
                'FIELD_TYPE': 0,
                'FORMULA': '0*0',
                'INPUT': outputs['InvertirDireccinDeLnea']['OUTPUT'],
                'NEW_FIELD': False,
                'OUTPUT': 'memory:'
            }
            outputs['Vel_ps0'] = processing.run('qgis:fieldcalculator', alg_params)
    
            # VEL_PS_INV=0
            alg_params = {
                'FIELD_LENGTH': 10,
                'FIELD_NAME': 'reverse_speed',
                'FIELD_PRECISION': 9,
                'FIELD_TYPE': 0,
                'FORMULA': '0*0',
                'INPUT': xarxa,
                'NEW_FIELD': False,
                'OUTPUT': 'memory:'
            }
            outputs['Vel_ps_inv0'] = processing.run('qgis:fieldcalculator', alg_params)
        
           # CREACIO_VEL_KMH_INV
            alg_params = {
                'FIELD_LENGTH': 10,
                'FIELD_NAME': 'VEL_KMH',
                'FIELD_PRECISION': 9,
                'FIELD_TYPE': 0,
                'FORMULA': '\"reverse_speed\"*60/1000',
                'INPUT': outputs['Vel_ps0']['OUTPUT'],
                'NEW_FIELD': False,
                'OUTPUT': 'memory:'
            }
            outputs['Creacio_vel_kmh_inv'] = processing.run('qgis:fieldcalculator', alg_params)
        
            # CREACIO_VEL_KMH_DIREC
            alg_params = {
                'FIELD_LENGTH': 10,
                'FIELD_NAME': 'VEL_KMH',
                'FIELD_PRECISION': 9,
                'FIELD_TYPE': 0,
                'FORMULA': 'speed*60/1000',
                'INPUT': outputs['Vel_ps_inv0']['OUTPUT'],
                'NEW_FIELD': True,
                'OUTPUT': 'memory:'
            }
            outputs['Creacio_vel_kmh_direc'] = processing.run('qgis:fieldcalculator', alg_params)
                    
        else:
            # VEL_PS=0
            alg_params = {
                'FIELD_LENGTH': 10,
                'FIELD_NAME': 'reverse_speed',
                'FIELD_PRECISION': 9,
                'FIELD_TYPE': 0,
                'FORMULA': '0*0',
                'INPUT': outputs['InvertirDireccinDeLnea']['OUTPUT'],
                'NEW_FIELD': False,
                'OUTPUT': 'memory:'
            }
            outputs['Vel_ps0'] = processing.run('qgis:fieldcalculator', alg_params)
    
            # VEL_PS_INV=0
            alg_params = {
                'FIELD_LENGTH': 10,
                'FIELD_NAME': 'reverse_speed',
                'FIELD_PRECISION': 9,
                'FIELD_TYPE': 0,
                'FORMULA': '0*0',
                'INPUT': xarxa,
                'NEW_FIELD': False,
                'OUTPUT': 'memory:'
            }
            outputs['Vel_ps_inv0'] = processing.run('qgis:fieldcalculator', alg_params)
        
           # CREACIO_VEL_KMH_INV
            alg_params = {
                'FIELD_LENGTH': 10,
                'FIELD_NAME': 'VEL_KMH',
                'FIELD_PRECISION': 9,
                'FIELD_TYPE': 0,
                'FORMULA': '\"speed\"*60/1000',
                'INPUT': outputs['Vel_ps0']['OUTPUT'],
                'NEW_FIELD': False,
                'OUTPUT': 'memory:'
            }
            outputs['Creacio_vel_kmh_inv'] = processing.run('qgis:fieldcalculator', alg_params)
        
            # CREACIO_VEL_KMH_DIREC
            alg_params = {
                'FIELD_LENGTH': 10,
                'FIELD_NAME': 'VEL_KMH',
                'FIELD_PRECISION': 9,
                'FIELD_TYPE': 0,
                'FORMULA': 'speed*60/1000',
                'INPUT': outputs['Vel_ps_inv0']['OUTPUT'],
                'NEW_FIELD': True,
                'OUTPUT': 'memory:'
            }
            outputs['Creacio_vel_kmh_direc'] = processing.run('qgis:fieldcalculator', alg_params)
        
        # Unir capas vectoriales
        alg_params = {
            'CRS': QgsCoordinateReferenceSystem('EPSG:'+str(crs)),
            'LAYERS': [outputs['Creacio_vel_kmh_direc']['OUTPUT'],outputs['Creacio_vel_kmh_inv']['OUTPUT']],
            'OUTPUT': 'memory:'
        }
        outputs['UnirCapasVectoriales'] = processing.run('native:mergevectorlayers', alg_params)
    
        # DIRECCIO
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': 'DIRECCIO',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 2,
            'FORMULA': '\'D\'',
            'INPUT': outputs['UnirCapasVectoriales']['OUTPUT'],
            'NEW_FIELD': True,
            'OUTPUT': 'memory:'
        }
        outputs['Direccio'] = processing.run('qgis:fieldcalculator', alg_params)

        if (self.dlg.CostNusos.isChecked()):
            # CREACIO_L_TRAM_TEMP
            alg_params = {
                'FIELD_LENGTH': 10,
                'FIELD_NAME': 'L_TRAM_TEMP',
                'FIELD_PRECISION': 9,
                'FIELD_TYPE': 0,
                'FORMULA': '$length',
                'INPUT': outputs['Direccio']['OUTPUT'],
                'NEW_FIELD': True,
                'OUTPUT': 'memory:'
            }
            outputs['Direccio'] = processing.run('qgis:fieldcalculator', alg_params)        
        return outputs['Direccio']['OUTPUT']
                
    def calcul_graf3(self,sql_punts,sql_xarxa,uri2):
        #               *****************************************************************************************************************
        #               INICI CARREGA DE LES zone_{Fitxer}, PARCELES O PORTALS QUE QUEDEN AFECTATS PEL BUFFER DEL GRAF 
        #               *****************************************************************************************************************
        #                uri.setDataSource("","("+sql_total+")","geom","","id")
        global Fitxer
        QApplication.processEvents()
        uri2.setDataSource("","("+sql_punts+")","geom","","id")
        QApplication.processEvents()
        punts_lyr = QgsVectorLayer(uri2.uri(False), "punts", "postgres")
        QApplication.processEvents()
        uri2.setDataSource("","("+sql_xarxa+")","geom","","id")
        QApplication.processEvents()
        network_lyr = QgsVectorLayer(uri2.uri(False), "xarxa", "postgres")
        QApplication.processEvents()
        #if (punts_lyr.isValid() and network_lyr.isValid()):
        #************************************************************************************
        #************************************************************************************
        outputs = {}
        epsg = network_lyr.crs().postgisSrid()
        
        alg_params = {
            'INPUT': punts_lyr,
            'OPERATION': '',
            'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:'+str(epsg)),
            'OUTPUT': 'memory:'
        }
        outputs['ReproyectarCapa'] = processing.run('native:reprojectlayer', alg_params)
        
        p_lyr = outputs['ReproyectarCapa']['OUTPUT']
        graf = network_lyr
        
        l_lyr=self.Calcula_VEL_KMH(graf,epsg,uri2)
        
        lines_features = [ line_feature for line_feature in l_lyr.getFeatures() ] 
        points_features = [ point_feature for point_feature in p_lyr.getFeatures() ]
        vl = QgsVectorLayer("LineString?crs=epsg:" + str(epsg), "Lineas2", "memory")
        pr = vl.dataProvider()
        lista=[]
        for field in lines_features[0].fields():
            lista.append(field)
        
        pr.addAttributes(lista)
            
        vl.updateFields()
        feats = []
        puntos=[]
        idx_lines=[]
        punts_id=[]
        Trams0_id=[]
        Trams1_id=[]
        Trams_id=[]
        repetits=[]
        for p in points_features:
            if not p.geometry().isNull():
                lineas=[]
                for l in lines_features:
                    if not l.geometry().isNull():
                        lineas.append([l.geometry().closestSegmentWithContext( p.geometry().asPoint() )])
                punts_id.append(min(lineas)[0][1])
                Trams0_id.append(lineas.index(sorted(lineas)[0])+1)
                Trams1_id.append(lineas.index(sorted(lineas)[1])+1)
        Trams_id.append([0,Trams0_id])
        Trams_id.append([1,Trams1_id])
        
        repetits.append([x for x, y in collections.Counter(Trams_id[0][1]).items() if y > 1])
        repetits.append([x for x, y in collections.Counter(Trams_id[1][1]).items() if y > 1])
        
        trams_fets=[]
        feat_temp = QgsFeature()
        for index_punt,p in enumerate(points_features):
            for i in range(2):
                linea_cut=lines_features[Trams_id[i][1][index_punt]-1]
                if ([linea_cut.id()]) not in repetits:
                    idx_lines.append(linea_cut.id())
        
                    start=0
                    distancia=round(self.troba_distancia(linea_cut,p),3)
                    longitud=round(linea_cut.geometry().length(),3)
                    lp=linea_cut.geometry().constGet()
                    newgeom=QgsGeometry(lp.curveSubstring(start,distancia))
                    f=QgsFeature()
                    f.setAttributes(linea_cut.attributes())
                    f.setGeometry(newgeom)
                    feats.append(f)
        
                    newgeom=QgsGeometry(lp.curveSubstring(distancia,longitud))
                    f=QgsFeature()
                    f.setAttributes(linea_cut.attributes())
                    f.setGeometry(newgeom)
                    feats.append(f)
                else:
                    id_tram_Read=linea_cut.id()
                    if id_tram_Read not in trams_fets:
                        trams_fets.append(id_tram_Read)
        
                        idx_lines.append(id_tram_Read)
                        posicio=self.troba_posicio(linea_cut.id(),Trams_id[i][1])
                        llista_dist=self.calcula_distancies(linea_cut,posicio,points_features)
                        #En llista_dist estan ordenat de menor distancia a major distancia
                        
                        start=0
                        longitud=round(linea_cut.geometry().length(),3)
                        lp=linea_cut.geometry().constGet()
                        for x in range(len(posicio)):
                            if x==0:
                                start=0
                            else:
                                start=round(llista_dist[x-1][1],3)
                            
                            distancia=round(llista_dist[x][1],3)
        
                            newgeom=QgsGeometry(lp.curveSubstring(start,distancia))
                            f=QgsFeature()
                            f.setAttributes(linea_cut.attributes())
                            f.setGeometry(newgeom)
                            feats.append(f)
        
                        newgeom=QgsGeometry(lp.curveSubstring(distancia,longitud))
                        f=QgsFeature()
                        f.setAttributes(linea_cut.attributes())
                        f.setGeometry(newgeom)
                        feats.append(f)
                        
            minDistPoint = punts_id[index_punt]
            punto = QgsFeature()
            punto.setGeometry(QgsGeometry.fromPointXY(minDistPoint))
        
            punto.setAttributes([points_features.index(p),123])
            puntos.append(punto)
        for current,feat_item in enumerate(lines_features):
            if (current+1) not in idx_lines:
                feats.append(feat_item)
        pr.addFeatures(feats)
        vl.updateExtents()
        
        if (self.dlg.CostNusos.isChecked()):

            # AFEGIR COST DE SEMAFORS A VEL_KMH
            print("entra")
            alg_params = {
                'FIELD_LENGTH': 10,
                'FIELD_NAME': 'VEL_KMH',
                'FIELD_PRECISION': 9,
                'FIELD_TYPE': 0,
                'FORMULA': '($length /(($length/((\"speed\"+\"reverse_speed\")))+(\"total_cost_semaphore\"*($length/\"L_TRAM_TEMP\"))))*60/1000',
                'INPUT': vl,
                'NEW_FIELD': False,
                'OUTPUT': 'memory:'
            }
            outputs['vel_kmh_amb_sem'] = processing.run('qgis:fieldcalculator', alg_params)
            layer=outputs['vel_kmh_amb_sem']['OUTPUT']
        else:
            layer=vl

        # AreaServei
        alg_params = {
            'DEFAULT_DIRECTION': 0,
            'DEFAULT_SPEED': 50,
            'DIRECTION_FIELD': 'DIRECCIO',
            'INCLUDE_BOUNDS': False,
            'INPUT':layer,
            'SPEED_FIELD': 'VEL_KMH',
            'START_POINTS': p_lyr,
            'STRATEGY': 1,
            'TOLERANCE': 0.1,
            'TRAVEL_COST': str(int(self.dlg.Radi_ZI.text())*60),
            'VALUE_BACKWARD': '',
            'VALUE_BOTH': '',
            'VALUE_FORWARD': 'D',
            'OUTPUT_LINES':'memory:'
        }
        outputs['Areaservei'] = processing.run('qgis:serviceareafromlayer', alg_params)

        result_dissolve = processing.run('native:dissolve', {"INPUT": outputs['Areaservei']['OUTPUT_LINES'],
                                                             "FIELD": 'id',
                                                             "OUTPUT": 'memory:'})        

        result_singleparts = processing.run('native:multiparttosingleparts', {"INPUT": outputs['Areaservei']['OUTPUT_LINES'],
                                                                              "OUTPUT": 'memory:'})
        result_buffer = processing.run('native:buffer', {"INPUT": result_singleparts['OUTPUT'],
                                                         "DISTANCE": 20,
                                                         "SEGMENTS": 5,
                                                         "END_CAP_STYLE":0,
                                                         "JOIN_STYLE":0,
                                                         "MITER_LIMIT":1,
                                                         "DISSOLVE":0,
                                                         "OUTPUT": 'memory:'})
        
        result_buffer_dissolve = processing.run('native:dissolve', {"INPUT": result_buffer['OUTPUT'],
                                                                    "FIELD": 'id',
                                                                    "OUTPUT": 'memory:'})    
        
        return result_buffer_dissolve,result_dissolve
    
    def on_click_INICI(self):
        """Aquesta funcio genera tots els calculs amb tots el parametres que li hem introduit
        a la finestra a traves dels elements de la interficie."""
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        global micolor_Topo
        global micolor_ZI
        global micolor_Graf
        global Fitxer
        global cur
        global conn
        global progress
        global TEMPORARY_PATH


        self.dlg.setEnabled(False)
        if self.dlg.ZIGraf_radio.isChecked() and self.dlg.comboGraf.currentText() == 'Selecciona una entitat':
                QMessageBox.information(None, "Error", "No hi ha seleccionada cap capa de xarxa")
                self.dlg.setEnabled(True)
                return

        arxiuLlegit = False
        self.dlg.Progres.setValue(0)
        
        self.dlg.Progres.setVisible(False)
        self.dlg.EstatConnexioFixa.setText('Processant:')
        QApplication.processEvents()
        
        
#       *****************************************************************************************************************
#       INICI CREACIO DE LES TAULES RESUM DESDE EL CSV SUMINISTRAT 
#       *****************************************************************************************************************
        if (self.dlg.RelacionarPoblacio.isChecked()):
            path = QFileDialog.getExistingDirectory(self.dlg,
                    "Busca la carpeta que conté els arxius provinents del mòdul TAULA RESUM", Path_Inicial+"\\",
                    QFileDialog.ShowDirsOnly)
            trobat = True
            while trobat:
                if (path != ''):
                    if versio_db == "1.0":
                        ver = "v1"
                    else:
                        ver = "v2"
                        
                    if (os.path.exists(path + f"/tr_illes_{ver}.csv")):
                        trobat = False 
                        
                        arxiu = open(path + f"/tr_illes_{ver}.csv", 'r')
                        arxiu.readline()
                        lines = arxiu.readlines()
                        try:
                            cur.execute("CREATE TABLE \"Resum_Temp_"+Fitxer+"\" (\"ILLES_Codificades\" varchar(20), \"Habitants\" numeric);")
                            conn.commit()
                            insert=""
                            for linia in lines:
                                vec = linia.split(';', 20 )
                                insert += "INSERT INTO \"Resum_Temp_"+Fitxer+"\" (\"ILLES_Codificades\", \"Habitants\") VALUES ('"+ vec[0] + "', "+ vec[1]+ ");\n"
                            cur.execute(insert)
                            conn.commit()
                            #print "ok"                
                        except Exception as ex:
                            self.eliminaTaulesTemporals()
                            print ("I am unable to connect to the database")
                            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                            message = template.format(type(ex).__name__, ex.args)
                            print (message)
                            
                            QMessageBox.information(None, "Error", "DROP TABLE ERROR LayerExportat")
                            conn.rollback()
                            self.eliminaTaulesCalcul(Fitxer)
                            self.dlg.setEnabled(True)
                            return
                        
                        arxiu.close()
                        arxiuLlegit = True
                    else:
                        print ("No hi ha l'arxiu")
                        path = QFileDialog.getExistingDirectory(self.dlg,"Busca la carpeta que conté els arxius provinents del mòdul TAULA RESUM", Path_Inicial+"/",QFileDialog.ShowDirsOnly)
                else:
                    print ("Cancelat")
                    trobat = False
                    self.dlg.Progres.setVisible(False)
#       *****************************************************************************************************************
#       FI CREACIO DE LES TAULES RESUM DESDE EL CSV SUMINISTRAT 
#       *****************************************************************************************************************
        a=time.time()
        self.dlg.btn_mostra_sel.setVisible(False)
        progressMessageBar = self.bar.createMessage('Processant:')
        progress = QProgressBar()
        progress.setMaximum(100)
        progress.setAlignment(Qt.AlignLeft|Qt.AlignTop)
        progressMessageBar.layout().addWidget(progress)
        self.bar.pushWidget(progressMessageBar, Qgis.Info)    
        self.bar.setEnabled(True)
    
        progress.setValue(10)
        self.dlg.Progres.setValue(10)
        QApplication.processEvents()
        
        fesCalcul = True      
        if (self.dlg.RelacionarPoblacio.isChecked() and not arxiuLlegit):
            fesCalcul = False
        elif (self.dlg.RelacionarPoblacio.isChecked() and arxiuLlegit):
            fesCalcul = True
        else:
            fesCalcul = True
        if not(fesCalcul):
            self.dlg.setEnabled(True)
            return
            
        if (self.dlg.EstatConnexio.text()=='Connectat'): 
            self.dlg.EstatConnexio.setStyleSheet('border:1px solid #000000; background-color: rgb(255, 170, 142)')
            self.dlg.EstatConnexio.setText('Connectat i processant')
            llista_sel=self.dlg.ListaActivitatsDesc.selectedItems()
            llista_sel_EPIGRAF=self.dlg.ListaActivitatsEpigraf.selectedItems()
            if (len(llista_sel)>0 or len(llista_sel_EPIGRAF)>0):
                where_sentence="("
                for item in llista_sel:
                    where_sentence=where_sentence+"'"+item.toolTip()+"',"
                del llista_sel
                for item in llista_sel_EPIGRAF:
                    where_sentence=where_sentence+"'"+str(item.text())+"',"
                del llista_sel_EPIGRAF
                where_sentence=where_sentence[:-1]+")"
                #print where_sentence
                if (self.dlg.topo.isChecked()):
                    sql=f"SELECT distinct on (id_company) BC.\"id_company\",BC.\"name\",BC.\"epigraph\",DI.\"designator\" AS \"di_designator\",DI.\"cadastral_reference\",DI.\"geom\",BC.\"designator\" AS \"bc_designator\",BC.\"area_value\",("+self.dlg.texte_2.text()+f"*SQRT(BC.\"area_value\"/ PI())) AS RADI FROM (select * from \"company_{Fitxer}\" "
                    wheresql=f"where \"epigraph\" in "+where_sentence+f") BC LEFT JOIN \"address_{Fitxer}\" DI ON (BC.\"designator\" = DI.\"designator\")"
                    if (self.dlg.Mostra_punt_chk.isChecked()):
                        sql_total=f"select distinct on (id_company) row_number() OVER () AS \"ogc_fid\", TOT.\"epigraph\", TOT.\"name\",TOT.\"di_designator\",TOT.\"cadastral_reference\",TOT.\"bc_designator\",TOT.\"area_value\",TOT.\"radi\",TOT.\"id_company\",TOT.\"geom\" AS geom from ("+sql+wheresql+") TOT"
                    else:
                        sql_total=f"select distinct on (id_company) row_number() OVER () AS \"ogc_fid\", TOT.\"epigraph\", TOT.\"name\",TOT.\"di_designator\",TOT.\"cadastral_reference\",TOT.\"bc_designator\",TOT.\"area_value\",TOT.\"radi\",TOT.\"id_company\",ST_Buffer(TOT.\"geom\",TOT.\"radi\"::double precision) AS geom from ("+sql+wheresql+") TOT"
                    
                    sql_total_graf2=f"select distinct on (id) TOT.\"epigraph\", TOT.\"name\",TOT.\"di_designator\",TOT.\"cadastral_reference\",TOT.\"bc_designator\",TOT.\"area_value\",TOT.\"radi\",TOT.\"id_company\" AS \"id\",TOT.\"geom\" AS geom from ("+sql+wheresql+") TOT WHERE TOT.\"geom\" IS NOT NULL"
                else:
                    #sql="SELECT PA.\"geom\",PACOUNT.\"numae\",PA.\"cadastral_reference\" FROM (SELECT count(BC.\"epigraph\") as numAE , PA.\"cadastral_reference\" FROM (select * from \"company_{Fitxer}\" where \"epigraph\" in "+where_sentence+") BC LEFT JOIN \"parcel_temp_{Fitxer}\" PA ON (BC.\"cadastral_reference\" = PA.\"cadastral_reference\") WHERE (PA.\"cadastral_reference\" IS NOT NULL) AND (PA.\"cadastral_reference\"<>' ')  GROUP BY PA.\"cadastral_reference\") PACOUNT LEFT JOIN \"parcel_temp_{Fitxer}\" PA ON (PACOUNT.\"cadastral_reference\"=PA.\"cadastral_reference\") WHERE (PACOUNT.\"numae\">0) "
                    #sql_total="select TOT.\"cadastral_reference\" AS \"ogc_fid\", TOT.\"numae\",TOT.\"geom\" from ("+sql+") TOT"

                    sql=f"""
                        SELECT
                            PA."geom",
                            PACOUNT."numae",
                            PA."cadastral_reference"
                        FROM
                            (
                                SELECT
                                    COUNT(BC."epigraph") AS numAE,
                                    PA."cadastral_reference"
                                FROM
                                    (
                                        SELECT
                                            *
                                        FROM
                                            "company_{Fitxer}"
                                        WHERE
                                            "epigraph" IN {where_sentence}
                                    ) BC
                                LEFT JOIN
                                    "parcel_temp_{Fitxer}" PA
                                ON
                                    BC."cadastral_reference" = PA."cadastral_reference"
                                WHERE
                                    PA."cadastral_reference" IS NOT NULL
                                    AND PA."cadastral_reference" <> ' '
                                GROUP BY
                                    PA."cadastral_reference"
                            ) PACOUNT
                        LEFT JOIN
                            "parcel_temp_{Fitxer}" PA
                        ON
                            PACOUNT."cadastral_reference" = PA."cadastral_reference"
                        WHERE
                            PACOUNT."numae" > 0
                        """
                    sql_total = f"""
                        SELECT
                            TOT."cadastral_reference" AS "ogc_fid",
                            TOT."numae",
                            TOT."geom"
                        FROM
                            ({sql}) TOT
                                """
                    
                uri = QgsDataSourceUri()
                try:
                    uri.setConnection(host1,port1,nomBD1,usuari1,contra1)
                    print ("Connectat")
                    self.database_version()
                    
                except Exception as ex:
                            self.eliminaTaulesTemporals()
                            print ("Error a la connexió")
                            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                            message = template.format(type(ex).__name__, ex.args)
                            print (message)
                            
                            QMessageBox.information(None, "Error", "Error a la connexió")
                            conn.rollback()
                            self.eliminaTaulesCalcul(Fitxer)
                            self.dlg.setEnabled(True)
                            return
                
                #uri.setDataSource("","("+sql_total+")","geom","","ogc_fid")
                titol=self.dlg.texte_3.text().replace("'","\'")
                titol2="Número de policia amb activitat: "
                titol3=titol2.encode('utf8','strict')+titol.encode('utf8','strict')
                #print uri.uri()
                #vlayer = QgsVectorLayer(uri.uri(), titol3.decode('utf8'), "postgres")
                alg_params = {
                    "DATABASE": self.dlg.ComboConn.currentText(),
                    "GEOMETRY_FIELD": "geom",
                    "ID_FIELD": "ogc_fid",
                    "SQL": sql_total
                }
                vlayer = processing.run("qgis:postgisexecuteandloadsql", alg_params)["OUTPUT"]
                vlayer.setName(titol3.decode('utf8'))
                #self.retorna_nom_geometria(vlayer)
                
                if vlayer.isValid():
                    crs = vlayer.dataProvider().sourceCrs()

                    if not self.dlg.parcela.isChecked() and self.dlg.Mostra_punt_chk.isChecked():
                        vlayer_temp = QgsVectorLayer(f"Point", titol3.decode('utf8'), "memory")
                        vlayer_temp.setCrs(crs)
                        vlayer_temp.dataProvider().addAttributes(vlayer.fields())
                        vlayer_temp.updateFields()
                        vlayer_temp.dataProvider().addFeatures(vlayer.getFeatures())
                        symbols = vlayer_temp.renderer().symbols(QgsRenderContext())
                        symbol = symbols[0]
                        symbol.setColor(self.dlg.ColorTopos.palette().color(1))
                
                    else:
                        vlayer_temp = QgsVectorLayer(f"Polygon", titol3.decode('utf8'), "memory")
                        vlayer_temp.setCrs(crs)
                        vlayer_temp.dataProvider().addAttributes(vlayer.fields())
                        vlayer_temp.updateFields()
                        vlayer_temp.dataProvider().addFeatures(vlayer.getFeatures())

                    QgsProject.instance().addMapLayer(vlayer_temp,False)
                    root = QgsProject.instance().layerTreeRoot()
                    myLayerNode=QgsLayerTreeLayer(vlayer_temp)
                    root.insertChildNode(0,myLayerNode)
                    myLayerNode.setCustomProperty("showFeatureCount", True)
                    
                    iface.mapCanvas().refresh()

                else:
                    QMessageBox.information(None, "LAYER ERROR 0:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))

                if (self.dlg.topo.isChecked()): #Calcul mitjançant numero de policia
                    if (self.dlg.ZIGraf_radio.isChecked()):
                        
                        #Calcul mitjançant GRAF
                        progress.setValue(30)

                        self.dlg.Progres.setValue(30)
                        QApplication.processEvents()
#                       *****************************************************************************************************************
#                       INICI CALCUL DEL GRAF I DEL BUFFER DELS TRAMS CALCULATS 
#                       *****************************************************************************************************************                            
                        if (self.dlg.chk_calc_local.isChecked() and self.dlg.ZIGraf_radio.isChecked()):
                            if (self.dlg.GrafCombo.currentText()=="Distancia"):
                                #sql_xarxa="SELECT * FROM \""+self.dlg.comboGraf.currentText()+"\""
                                sql_xarxa = f"SELECT * FROM stretch_{Fitxer}"
                                buffer_resultat,graf_resultat=self.calcul_graf2(sql_total_graf2,sql_xarxa,uri)
                                vlayer=buffer_resultat['OUTPUT']
                                vlayer_graf=graf_resultat['OUTPUT']
            
                                error = QgsVectorLayerExporter.exportLayer(vlayer, 'table="public"."Buffer_Final_'+Fitxer+'" (geom) '+uri.connectionInfo(), "postgres", vlayer.crs(), False)
                                if error[0] != 0:
                                    iface.messageBar().pushMessage(u'Error', error[1])
                                    
                                sql_buffer="SELECT * FROM \"Buffer_Final_"+Fitxer+"\""
                            else:
                                #sql_xarxa="SELECT * FROM \""+self.dlg.comboGraf.currentText()+"\""
                                sql_xarxa = f"SELECT * FROM stretch_{Fitxer}"
                                buffer_resultat,graf_resultat=self.calcul_graf3(sql_total_graf2,sql_xarxa,uri)
                                vlayer=buffer_resultat['OUTPUT']
                                vlayer_graf=graf_resultat['OUTPUT']
            
                                error = QgsVectorLayerExporter.exportLayer(vlayer, 'table="public"."Buffer_Final_'+Fitxer+'" (geom) '+uri.connectionInfo(), "postgres", vlayer.crs(), False)
                                if error[0] != 0:
                                    iface.messageBar().pushMessage(u'Error', error[1])
                                    
                                sql_buffer="SELECT * FROM \"Buffer_Final_"+Fitxer+"\""
                        
                        else:
                            sql_buffer=self.calcul_graf(sql_total)
                            
                            if sql_buffer=="ERROR":
                                self.dlg.setEnabled(True)
                                return         
                            sql_activitat = "ALTER TABLE \"Buffer_Final_"+Fitxer+f"\" ADD \"name\" varchar, ADD \"epigraph\" varchar, ADD \"designator\" varchar, ADD \"area_value\" float8, ADD \"cadastral_reference\" varchar;"
                            cur.execute(sql_activitat)
                            conn.commit()
                            
                            sql_activitat = 'UPDATE \"Buffer_Final_'+Fitxer+'\" SET ' 
                            sql_activitat += f'\"name\" = (SELECT \"name\" FROM \"company_{Fitxer}\" WHERE \"Buffer_Final_'+Fitxer+f'\".\"punt_id\" = \"company_{Fitxer}\".\"id_company\"::INTEGER),'
                            sql_activitat += f'\"epigraph\" = (SELECT \"epigraph\" FROM \"company_{Fitxer}\" WHERE \"Buffer_Final_'+Fitxer+f'\".\"punt_id\" = \"company_{Fitxer}\".\"id_company\"::INTEGER),'
                            sql_activitat += f'\"designator\" = (SELECT \"designator\" FROM \"company_{Fitxer}\" WHERE \"Buffer_Final_'+Fitxer+f'\".\"punt_id\" = \"company_{Fitxer}\".\"id_company\"::INTEGER),'
                            sql_activitat += f'\"area_value\" = (SELECT \"area_value\" FROM \"company_{Fitxer}\" WHERE \"Buffer_Final_'+Fitxer+f'\".\"punt_id\" = \"company_{Fitxer}\".\"id_company\"::INTEGER),'
                            sql_activitat += f'\"cadastral_reference\" = (SELECT \"cadastral_reference\" FROM \"company_{Fitxer}\" WHERE \"Buffer_Final_'+Fitxer+f'\".\"punt_id\" = \"company_{Fitxer}\".\"id_company\"::INTEGER);'

                            '''
                            sql_activitat += '\"name\" = (SELECT \"company_{Fitxer}\".\"name\" FROM \"company_{Fitxer}\",\"Buffer_Final_'+Fitxer+'\" WHERE \"Buffer_Final_'+Fitxer+'\".\"punt_id\" = \"company_{Fitxer}\".\"id_company\"),'
                            sql_activitat += '\"epigraph\" = (SELECT \"company_{Fitxer}\".\"epigraph\" FROM \"company_{Fitxer}\",\"Buffer_Final_'+Fitxer+'\" WHERE \"Buffer_Final_'+Fitxer+'\".\"punt_id\" = \"company_{Fitxer}\".\"id_company\"),'
                            sql_activitat += '\"designator\" = (SELECT \"company_{Fitxer}\".\"designator\" FROM \"company_{Fitxer}\",\"Buffer_Final_'+Fitxer+'\" WHERE \"Buffer_Final_'+Fitxer+'\".\"punt_id\" = \"company_{Fitxer}\".\"id_company\"),'
                            sql_activitat += '\"area_value\" = (SELECT \"company_{Fitxer}\".\"area_value\" FROM \"company_{Fitxer}\",\"Buffer_Final_'+Fitxer+'\" WHERE \"Buffer_Final_'+Fitxer+'\".\"punt_id\" = \"company_{Fitxer}\".\"id_company\"),'
                            sql_activitat += '\"cadastral_reference\" = (SELECT \"company_{Fitxer}\".\"cadastral_reference\" FROM \"company_{Fitxer}\",\"Buffer_Final_'+Fitxer+'\" WHERE \"Buffer_Final_'+Fitxer+'\".\"punt_id\" = \"company_{Fitxer}\".\"id_company\");'
                            '''
                            cur.execute(sql_activitat)
                            conn.commit()                   

#                       *****************************************************************************************************************
#                       FI CALCUL DEL GRAF I DEL BUFFER DELS TRAMS CALCULATS 
#                       *****************************************************************************************************************

                        progress.setValue(60)
                        self.dlg.Progres.setValue(60)
                        QApplication.processEvents()
                        sql_ZI=sql_buffer 
                        sql_PART1_ZI=f"SELECT row_number() OVER () AS \"ogc_fid\",ILL.\"cadastral_zoning_reference\",ILL.\"geom\",RS.\"Habitants\" FROM (select \"zone_{Fitxer}\".\"cadastral_zoning_reference\",\"zone_{Fitxer}\".\"geom\" from \"zone_{Fitxer}\" where \"zone_{Fitxer}\".\"id_zone\" NOT IN (select \"zone_{Fitxer}\".\"id_zone\" from \"zone_{Fitxer}\" INNER JOIN ("
                        sql_TOTAL_ZI=sql_PART1_ZI+sql_ZI+f") TOT2 on ST_Intersects(\"zone_{Fitxer}\".\"geom\",TOT2.\"geom\"))) ILL JOIN \"Resum_Temp_"+Fitxer+"\" RS on (ILL.\"cadastral_zoning_reference\" = RS.\"ILLES_Codificades\")"
                    else:
                        sql=f"SELECT BC.\"epigraph\",BC.\"name\",DI.\"designator\" AS \"di_designator\",DI.\"cadastral_reference\",DI.\"geom\",BC.\"designator\" AS \"bc_designator\",BC.\"area_value\",("+self.dlg.texte_2.text()+f"*SQRT(BC.\"area_value\"/ PI())) AS RADI FROM (select * from \"company_{Fitxer}\" "
                        wheresql=f"where \"epigraph\" in "+where_sentence+f") BC LEFT JOIN \"address_{Fitxer}\" DI ON (BC.\"designator\" = DI.\"designator\")"
                        sql_ZI=f"select TOT.\"epigraph\", TOT.\"name\", TOT.\"di_designator\",TOT.\"cadastral_reference\",TOT.\"bc_designator\",TOT.\"area_value\",TOT.\"radi\",row_number() OVER () AS \"ogc_fid\",ST_Buffer(TOT.\"geom\","+self.dlg.Radi_ZI.text()+"::double precision) AS geom from ("+sql+wheresql+") TOT"
                        sql_PART1_ZI=f"SELECT row_number() OVER () AS \"ogc_fid\",ILL.\"cadastral_zoning_reference\",ILL.\"geom\",RS.\"Habitants\" FROM (select \"zone_{Fitxer}\".\"cadastral_zoning_reference\",\"zone_{Fitxer}\".\"geom\" from \"zone_{Fitxer}\" where \"zone_{Fitxer}\".\"id_zone\" NOT IN (select \"zone_{Fitxer}\".\"id_zone\" from \"zone_{Fitxer}\" INNER JOIN ("
                        sql_TOTAL_ZI=sql_PART1_ZI+sql_ZI+f") TOT2 on ST_Intersects(\"zone_{Fitxer}\".\"geom\",TOT2.\"geom\"))) ILL JOIN \"Resum_Temp_"+Fitxer+"\" RS on (ILL.\"cadastral_zoning_reference\" = RS.\"ILLES_Codificades\")"
                else:
                    #Calcul mitjançant parceles
                    sql=f"SELECT PA.\"geom\",PACOUNT.\"numae\",PA.\"cadastral_reference\" FROM (SELECT count(BC.\"epigraph\") as numAE , PA.\"cadastral_reference\" FROM (select * from \"company_{Fitxer}\" where \"epigraph\" in "+where_sentence+f") BC LEFT JOIN \"parcel_temp_{Fitxer}\" PA ON (BC.\"cadastral_reference\" = PA.\"cadastral_reference\") WHERE (PA.\"cadastral_reference\" IS NOT NULL) AND (PA.\"cadastral_reference\"<>' ')  GROUP BY PA.\"cadastral_reference\") PACOUNT LEFT JOIN \"parcel_temp_{Fitxer}\" PA ON (PACOUNT.\"cadastral_reference\"=PA.\"cadastral_reference\") WHERE (PACOUNT.\"numae\">0) "
                    sql_ZI=f"select TOT.\"cadastral_reference\",TOT.\"numae\",row_number() OVER () AS \"ogc_fid\",ST_Buffer(TOT.\"geom\","+self.dlg.Radi_ZI.text()+"::double precision) as geom from ("+sql+") TOT"
                    sql_PART1_ZI=f"SELECT row_number() OVER () AS \"ogc_fid\",ILL.\"cadastral_zoning_reference\",ILL.\"geom\",RS.\"Habitants\" FROM (select \"zone_{Fitxer}\".\"cadastral_zoning_reference\",\"zone_{Fitxer}\".\"geom\" from \"zone_{Fitxer}\" where \"zone_{Fitxer}\".\"id_zone\" NOT IN (select \"zone_{Fitxer}\".\"id_zone\" from \"zone_{Fitxer}\" INNER JOIN ("
                    sql_TOTAL_ZI=sql_PART1_ZI+sql_ZI+f") TOT2 on ST_Intersects(\"zone_{Fitxer}\".\"geom\",TOT2.\"geom\"))) ILL JOIN \"Resum_Temp_"+Fitxer+"\" RS on (ILL.\"cadastral_zoning_reference\" = RS.\"ILLES_Codificades\")"
                
                uri.setDataSource("","("+sql_TOTAL_ZI+")","geom","","ogc_fid")
                if (self.dlg.RelacionarPoblacio.isChecked()):
                    titol=self.dlg.texte_3.text().replace("'","\'")
                    if (self.dlg.GrafCombo.currentText()=="Distancia" or self.dlg.ZICirc_radio.isChecked()):
                        titol2='Temàtic de població que es troba a més de '+self.dlg.Radi_ZI.text()+' m de la activitat '
                    else:
                        titol2='Temàtic de població que es troba a més de '+self.dlg.Radi_ZI.text()+' min de la activitat '
                        
                    titol3=titol2.encode('utf8','strict')+titol.encode('utf8','strict')
                    vlayer = QgsVectorLayer(uri.uri(), titol3.decode('utf8'), "postgres")
                    if vlayer.isValid():
                        fieldname="Habitants"
                        numberOfClasses=5
                        mysymbol=QgsFillSymbol()
                        if (self.dlg.ColorDegradat.currentText()=='Gris'):
                            colorRamp=QgsGradientColorRamp( QColor( 230, 230, 230 ), QColor( 60, 60, 60 ))
                        elif (self.dlg.ColorDegradat.currentText()=='Vermell'):
                            colorRamp=QgsGradientColorRamp( QColor( 255, 154, 154 ), QColor( 154, 0, 0 ))
                        elif (self.dlg.ColorDegradat.currentText()=='Groc'):
                            colorRamp=QgsGradientColorRamp( QColor( 255, 255, 154 ), QColor( 154, 154, 0 ))
                        elif (self.dlg.ColorDegradat.currentText()=='Blau'):
                            colorRamp=QgsGradientColorRamp( QColor( 154, 255, 255 ), QColor( 0, 0, 154 ))
                        elif (self.dlg.ColorDegradat.currentText()=='Verd'):
                            colorRamp=QgsGradientColorRamp( QColor( 154, 255, 154 ), QColor( 0, 154, 0 ))
                        
                        format = QgsRendererRangeLabelFormat()
                        format.setFormat("%1 - %2 habitants")
                        format.setPrecision(0)
                        format.setTrimTrailingZeroes(True)

                        crs = vlayer.dataProvider().sourceCrs()
                        
                        vlayer_temp = QgsVectorLayer("MultiPolygon", titol3.decode('utf8'), "memory")
                        vlayer_temp.setCrs(crs)
                        vlayer_temp.dataProvider().addAttributes(vlayer.fields())
                        vlayer_temp.updateFields()
                        vlayer_temp.dataProvider().addFeatures(vlayer.getFeatures())
                        renderer=QgsGraduatedSymbolRenderer.createRenderer(vlayer_temp,fieldname,numberOfClasses,QgsGraduatedSymbolRenderer.Quantile,mysymbol,colorRamp)
                        renderer.setLabelFormat(format,True)
                        vlayer_temp.setRenderer(renderer)
                        
                        
                        QgsProject.instance().addMapLayer(vlayer_temp,False)
                        root = QgsProject.instance().layerTreeRoot()
                        myLayerNode=QgsLayerTreeLayer(vlayer_temp)
                        root.insertChildNode(0,myLayerNode)
                        myLayerNode.setCustomProperty("showFeatureCount", True)
                        iface.mapCanvas().refresh()
                    else:
                        QMessageBox.information(None, "LAYER ERROR 1:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))
                progress.setValue(70)
                self.dlg.Progres.setValue(70)
                QApplication.processEvents()

                if (self.dlg.Veure_ZI.isChecked()):
                    if not(self.dlg.NoMostrarZI.isChecked()):
                        if self.dlg.topo.isChecked():
                            if (self.dlg.ZIGraf_radio.isChecked()):
                                if (self.dlg.chk_calc_local.isChecked() and self.dlg.ZIGraf_radio.isChecked()):
                                    sql_total1=f"SELECT id_0 AS \"ogc_fid\",id AS \"punt_id\",\"geom\", \"epigraph\",\"name\", \"di_designator\",\"area_value\",\"cadastral_reference\" FROM \"Buffer_Final_"+Fitxer+"\""
                                else:
                                    sql_total1=f"SELECT row_number() OVER () AS \"ogc_fid\",\"punt_id\",\"geom\", \"epigraph\",\"name\", \"designator\",\"area_value\",\"cadastral_reference\" FROM \"Buffer_Final_"+Fitxer+"\""
                            else:
                                sql1=f"SELECT BC.\"epigraph\",BC.\"name\", DI.\"designator\" AS \"di_designator\",DI.\"cadastral_reference\",DI.\"geom\",BC.\"designator\" AS \"bc_designator\",BC.\"area_value\",("+self.dlg.texte_2.text()+f"*SQRT(BC.\"area_value\"/ PI())) AS RADI FROM (select * from \"company_{Fitxer}\" "
                                wheresql1=f"where \"epigraph\" in "+where_sentence+f") BC LEFT JOIN \"address_{Fitxer}\" DI ON (BC.\"designator\" = DI.\"designator\")"
                                sql_total1=f"select TOT.\"epigraph\",TOT.\"name\", TOT.\"di_designator\",TOT.\"cadastral_reference\",TOT.\"bc_designator\",TOT.\"area_value\",TOT.\"radi\",row_number() OVER () AS \"ogc_fid\",ST_Buffer(TOT.\"geom\","+self.dlg.Radi_ZI.text()+"::double precision) AS geom from ("+sql+wheresql+") TOT"
                        else:
                            sql=f"SELECT PA.\"geom\",PACOUNT.\"numae\",PA.\"cadastral_reference\" FROM (SELECT count(BC.\"epigraph\") as numAE , PA.\"cadastral_reference\" FROM (select * from \"company_{Fitxer}\" where \"epigraph\" in "+where_sentence+f") BC LEFT JOIN \"parcel_temp_{Fitxer}\" PA ON (BC.\"cadastral_reference\" = PA.\"cadastral_reference\") WHERE (PA.\"cadastral_reference\" IS NOT NULL) AND (PA.\"cadastral_reference\"<>' ')  GROUP BY PA.\"cadastral_reference\") PACOUNT LEFT JOIN \"parcel_temp_{Fitxer}\" PA ON (PACOUNT.\"cadastral_reference\"=PA.\"cadastral_reference\") WHERE (PACOUNT.\"numae\">0) "
                            sql_total1="select TOT.\"cadastral_reference\" as \"ogc_fid\",TOT.\"numae\",ST_Buffer(TOT.\"geom\","+self.dlg.Radi_ZI.text()+"::double precision) as geom from ("+sql+") TOT"
                            
                        uri.setDataSource("","("+sql_total1+")","geom","","ogc_fid")
                        titol=self.dlg.texte_3.text().replace("'","\'")
                        titol2='Àrea influència dels números de policia amb activitat: '
                        titol3=titol2.encode('utf8','strict')+titol.encode('utf8','strict')
                        vlayer = QgsVectorLayer(uri.uri(), titol3.decode('utf8'), "postgres")
                        if vlayer.isValid():
                            crs = vlayer.dataProvider().sourceCrs()
                            vlayer_temp = QgsVectorLayer("Polygon", titol3.decode('utf8'), "memory")
                            vlayer_temp.setCrs(crs)
                            vlayer_temp.dataProvider().addAttributes(vlayer.fields())
                            vlayer_temp.updateFields()
                            vlayer_temp.dataProvider().addFeatures(vlayer.getFeatures())
                            symbols = vlayer_temp.renderer().symbols(QgsRenderContext())
                            symbol=symbols[0]
                            symbol.setColor(self.dlg.ColorZI.palette().color(1))
                            symbol.setOpacity(self.dlg.Transparencia.value()/100)
                            QgsProject.instance().addMapLayer(vlayer_temp,False)
                            root = QgsProject.instance().layerTreeRoot()
                            myLayerNode=QgsLayerTreeLayer(vlayer_temp)
                            root.insertChildNode(0,myLayerNode)
                            myLayerNode.setCustomProperty("showFeatureCount", True)
                            iface.mapCanvas().refresh()
                        else:
                            QMessageBox.information(None, "LAYER ERROR 2:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))
                    progress.setValue(90)
                    self.dlg.Progres.setValue(90)
                    QApplication.processEvents()
                    
                    if (self.dlg.MostrarGraf_chk.isChecked()):
                        uri.setDataSource("","(SELECT * FROM Graf_utilitzat_"+Fitxer+")","geom","","id")
                        titol=self.dlg.texte_3.text().replace("'","\'")
                        titol2='Graf: '
                        titol3=titol2.encode('utf8','strict')+titol.encode('utf8','strict')

                        if (self.dlg.chk_calc_local.isChecked() and self.dlg.ZIGraf_radio.isChecked()):
                            vlayer=vlayer_graf
                        else:
                            vlayer = QgsVectorLayer(uri.uri(), titol3.decode('utf8'), "postgres")
                        if vlayer.isValid():
                            crs = vlayer.dataProvider().sourceCrs()
                            vlayer_temp = QgsVectorLayer("LineString", titol3.decode('utf8'), "memory")
                            vlayer_temp.setCrs(crs)
                            vlayer_temp.dataProvider().addAttributes(vlayer.fields())
                            vlayer_temp.updateFields()
                            vlayer_temp.dataProvider().addFeatures(vlayer.getFeatures())
                            symbols = vlayer_temp.renderer().symbols(QgsRenderContext())
                            symbol=symbols[0]
                            symbol.setColor(self.dlg.ColorGraf.palette().color(1))
                            symbol.setOpacity(self.dlg.Transparencia.value()/100)

                            QgsProject.instance().addMapLayer(vlayer_temp,False)
                            root = QgsProject.instance().layerTreeRoot()
                            myLayerNode=QgsLayerTreeLayer(vlayer_temp)
                            root.insertChildNode(0,myLayerNode)
                            myLayerNode.setCustomProperty("showFeatureCount", True)
                            iface.mapCanvas().refresh()
                        else:
                            QMessageBox.information(None, "LAYER ERROR 3:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))
                progress.setValue(0)
                self.bar.setEnabled(True)
                self.dlg.Progres.setValue(0)
                self.dlg.Progres.setVisible(False)
                self.bar.clearWidgets()
                self.dlg.EstatConnexioFixa.setText('Estat de la connexió:')
                QApplication.processEvents()

            else:
                QMessageBox.information(None, 'Informació:', 'No hi ha cap element seleccionat')
        else:
            QMessageBox.information(None, 'Informació:', 'No està connectat a cap base de dades')

        print ("Durada: "+str(int(time.time()-a))+" s.")
        nom_conn=self.dlg.ComboConn.currentText()
        select = 'Selecciona connexió'
        if nom_conn==select:
            self.dlg.EstatConnexio.setText('No connectat')
            self.dlg.EstatConnexio.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
        else:
            self.dlg.EstatConnexio.setText('Connectat')
            self.dlg.EstatConnexio.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
        self.dlg.Progres.setVisible(False)
        self.bar.clearWidgets()
        self.dlg.Progres.setVisible(False)
        QApplication.processEvents()
        self.eliminaTaulesCalcul(Fitxer)
        self.eliminaTaulesTemporals()
        self.dlg.setEnabled(True)
    
    def eliminaTaulesCalcul(self,Fitxer):
        global cur
        global conn
        try:
            cur.execute("DROP TABLE IF EXISTS \"Resum_Temp_"+Fitxer+"\"")
            cur.execute("DROP TABLE IF EXISTS \"Buffer_Final_"+Fitxer+"\"") 
            cur.execute("DROP TABLE IF EXISTS Graf_utilitzat_"+Fitxer)
            conn.commit()
        except Exception as ex:
            self.eliminaTaulesTemporals()
            print("Error DROP final")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error DROP final")
            conn.rollback()
            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
            self.dlg.setEnabled(True)
            
    def on_click_Sortir(self):
        """Aquesta funcio tanca el plugin"""
        self.EstatInicial()
        self.dlg.close()

    def campGeometria(self, taula):
        '''Aquesta funcio retorna el camp de geometria de la taula que li passem per parametres'''
        global cur
        global conn
        sql = "select f_geometry_column from geometry_columns where f_table_name = '" + taula + "'"
        #Connexio
        cur.execute(sql)
        camp = cur.fetchall()
        return camp[0][0]

    def on_Change_ComboConn(self):
        """Aquesta funcio fa els passos necssaris per connectar-se a la BD indicada per l'usuari"""
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        global schema
        global cur
        global conn
        global versio_db
        s = QSettings()
        nom_conn=self.dlg.ComboConn.currentText()
        select = 'Selecciona connexió'
        if nom_conn != select:
            s.beginGroup("PostgreSQL/connections/"+nom_conn)
            currentKeys = s.childKeys()
            
            nomBD1 = s.value("database", "" )
            contra1 = s.value("password", "" )
            host1 = s.value("host", "" )
            port1 = s.value("port", "" )
            usuari1 = s.value("username", "" )
            schema= 'public'
            #Connexio
            nomBD = nomBD1.encode('ascii','ignore')
            usuari = usuari1.encode('ascii','ignore')
            servidor = host1.encode('ascii','ignore')     
            contrasenya = contra1.encode('ascii','ignore')
            self.dlg.barraCerca.clear()
            
            self.dlg.ListaActivitatsDesc.clear()
            self.dlg.ListaActivitatsEpigraf.clear()
            self.dlg.EstatConnexio.setStyleSheet('border:1px solid #000000; background-color: #ffff7f')
            self.dlg.EstatConnexio.setText('Connectant...')
            self.dlg.EstatConnexio.setAutoFillBackground(True)
            QApplication.processEvents()
    
            try:
                estructura = "dbname='"+ nomBD.decode("utf-8") + "' user='" + usuari.decode("utf-8") +"' host='" + servidor.decode("utf-8") +"' password='" + contrasenya.decode("utf-8") + "'"# schema='"+schema+"'"
                conn = psycopg2.connect(estructura)
                self.dlg.EstatConnexio.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
                self.dlg.EstatConnexio.setText('Connectat')
                cur = conn.cursor()
                self.database_version()
                
            except Exception as ex:
                self.eliminaTaulesTemporals()
                print ("I am unable to connect to the database")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error canvi connexió")
                conn.rollback()
                self.dlg.ComboConn.setCurrentIndex(0)
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.EstatConnexio.setText('Error: Problema en la connexió.')
                self.dlg.setEnabled(True)
                return
            
            try:
                self.cercaDescripcio()
                self.cercaEpigraf()
                sql = "select f_table_name from geometry_columns where ((type = 'MULTILINESTRING' or type = 'LINESTRING') and f_table_schema ='public' and f_table_name NOT LIKE '%ccu_temp%') order by 1"
                cur.execute(sql)
                layersList= cur.fetchall()
                self.ompleCombos(self.dlg.comboGraf, layersList, 'Selecciona una entitat', True)
            except Exception as ex:
                self.eliminaTaulesTemporals()
                print ("I am unable to connect to the database")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error canvi connexió")
                conn.rollback()
                self.dlg.ComboConn.setCurrentIndex(0)
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.EstatConnexio.setText('Error: Problema en la connexió.')
                self.dlg.setEnabled(True)
                return
        else:
            self.dlg.EstatConnexio.setText('No connectat')
            self.dlg.EstatConnexio.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
            self.dlg.ListaActivitatsDesc.clear()
            self.dlg.ListaActivitatsEpigraf.clear()

    def database_version(self):
        global versio_db
        global cur
        global conn

        sql =   """
                    SELECT taula
                    FROM config
                    WHERE variable = 'versio';
                """
        cur.execute(sql)
        versio_db = cur.fetchone()[0]

        if versio_db == '1.0':
            cur.execute(f"""
                DROP TABLE IF EXISTS company_{Fitxer};
                CREATE TABLE company_{Fitxer} (
                    id_company,
                    epigraph,
                    designator,
                    area_value,
                    cadastral_reference,
                    description,
                    name
                ) AS SELECT id, "EPIGRAFIAE", "NumPol", "METRES2", "CADASREF", "DESCRIPCIOACTIVITAT", "FULLNAME" FROM "BrossaComercial";
            """)
            conn.commit()

            cur.execute(f"""
                        DROP TABLE IF EXISTS address_{Fitxer};
                        CREATE TABLE address_{Fitxer} (
                            id_address,
                            geom,
                            cadastral_reference,
                            designator
                        ) AS SELECT id, geom, "REF_CADAST", "Carrer_Num_Bis" FROM "dintreilla";
                        """)
            conn.commit()

            cur.execute(f"""
                        DROP TABLE IF EXISTS zone_{Fitxer};

                        CREATE TABLE zone_{Fitxer} (
                            id_zone,
                            geom,
                            cadastral_zoning_reference
                        ) AS SELECT id, geom, "D_S_I" FROM "ILLES";
                        """)
            conn.commit()

            cur.execute(f"""
                        DROP TABLE IF EXISTS parcel_temp_{Fitxer};

                        CREATE TABLE parcel_temp_{Fitxer} (
                            id_parcel,
                            geom,
                            cadastral_reference
                        ) AS SELECT id, geom, "UTM" FROM "parcel";
                        """)
            conn.commit()

            cur.execute(f"""
                        DROP TABLE IF EXISTS epigraph_{Fitxer};

                        CREATE TABLE epigraph_{Fitxer} (
                            id_epigraph,
                            description,
                            epigraph_code
                        ) AS SELECT id, "Descripcio epigraf", "Epigraf" FROM "Seccio1";
                        """)
            conn.commit()

            if self.dlg.comboGraf.currentText() is not None or self.dlg.comboGraf.currentText() != "":
                carrer = "SegmentsXarxaCarrers"
            else:
                carrer = self.dlg.comboGraf.currentText()

            if self.dlg.ZIGraf_radio.isChecked():
                cur.execute(f"""
                            DROP TABLE IF EXISTS stretch_{Fitxer};

                            CREATE TABLE stretch_{Fitxer} (
                                id,
                                geom,
                                cost,
                                reverse_cost,
                                semaphores,
                                total_cost_semaphore,
                                source,
                                target,
                                length,
                                direction,
                                slope_abs,
                                speed,
                                reverse_speed
                            ) AS SELECT id, the_geom, cost, reverse_cost, "Nombre_Semafors", "Cost_Total_Semafor_Tram", source, target, "LENGTH", "SENTIT", "PENDENT_ABS", "VELOCITAT_PS", "VELOCITAT_PS_INV" FROM "{carrer}";
                            """)
                conn.commit()
                cur.execute(f"""
                            SELECT pgr_createTopology('stretch_{Fitxer}', 0.0001, 'geom', 'id', 'source', 'target', clean:=true);
                            """)
        else:
            try:
                cur.execute(f"""
                    DROP TABLE IF EXISTS parcel_temp_{Fitxer};
                    CREATE TABLE parcel_temp_{Fitxer} AS SELECT * FROM "parcel";
                """)
                conn.commit()
            except Exception as ex:
                print ("I am unable to connect to the database")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error canvi connexió")
                conn.rollback()
                self.dlg.ComboConn.setCurrentIndex(0)
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.EstatConnexio.setText('Error: Problema en la connexió.')
                self.dlg.setEnabled(True)
                return
            try:
                cur.execute(f"""DROP TABLE IF EXISTS address_{Fitxer};
                                CREATE TABLE address_{Fitxer} AS SELECT * FROM "address";""")
                conn.commit()
            except Exception as ex:
                print ("I am unable to connect to the database")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error canvi connexió")
                conn.rollback()
                self.dlg.ComboConn.setCurrentIndex(0)
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.EstatConnexio.setText('Error: Problema en la connexió.')
                self.dlg.setEnabled(True)
                return
            try:
                cur.execute(f"""DROP TABLE IF EXISTS zone_{Fitxer};
                                CREATE TABLE zone_{Fitxer} AS SELECT * FROM "zone";""")
                conn.commit()
            except Exception as ex:
                print ("I am unable to connect to the database")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error canvi connexió")
                conn.rollback()
                self.dlg.ComboConn.setCurrentIndex(0)
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.EstatConnexio.setText('Error: Problema en la connexió.')
                self.dlg.setEnabled(True)
                return
            try:
                cur.execute(f"""DROP TABLE IF EXISTS company_{Fitxer};
                                CREATE TABLE company_{Fitxer} AS SELECT * FROM "company";""")
                conn.commit()
            except Exception as ex:
                print ("I am unable to connect to the database")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error canvi connexió")
                conn.rollback()
                self.dlg.ComboConn.setCurrentIndex(0)
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.EstatConnexio.setText('Error: Problema en la connexió.')
                self.dlg.setEnabled(True)
                return
            try:
                cur.execute(f"""DROP TABLE IF EXISTS epigraph_{Fitxer};
                                CREATE TABLE epigraph_{Fitxer} AS SELECT * FROM "epigraph";""")
                conn.commit()
            except Exception as ex:
                print ("I am unable to connect to the database")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error canvi connexió")
                conn.rollback()
                self.dlg.ComboConn.setCurrentIndex(0)
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.EstatConnexio.setText('Error: Problema en la connexió.')
                self.dlg.setEnabled(True)
                return
            if self.dlg.ZIGraf_radio.isChecked():
                try:
                    cur.execute(f"""DROP TABLE IF EXISTS stretch_{Fitxer};
                                    CREATE TABLE stretch_{Fitxer} AS SELECT * FROM "stretch";""")
                    conn.commit()
                    cur.execute(f"""SELECT pgr_createTopology('stretch_{Fitxer}', 0.0001, 'geom', 'id', 'source', 'target', clean:=true);""")
                    conn.commit()
                except Exception as ex:
                    print ("I am unable to connect to the database")
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    QMessageBox.information(None, "Error", "Error canvi connexió")
                    conn.rollback()
                    self.dlg.ComboConn.setCurrentIndex(0)
                    self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                    self.dlg.EstatConnexio.setText('Error: Problema en la connexió.')
                    self.dlg.setEnabled(True)
                    return
    
    def eliminaTaulesTemporals(self):
        global versio_db
        global cur
        global conn

        
        sql = f"DROP TABLE IF EXISTS company_{Fitxer};\n"
        sql += f"DROP TABLE IF EXISTS address_{Fitxer};\n"
        sql += f"DROP TABLE IF EXISTS zone_{Fitxer};\n"
        sql += f"DROP TABLE IF EXISTS parcel_temp_{Fitxer};\n"
        sql += f"DROP TABLE IF EXISTS epigraph_{Fitxer};\n"
        sql += f"DROP TABLE IF EXISTS stretch_{Fitxer};\n"
        sql += f"DROP TABLE IF EXISTS stretch_{Fitxer}_vertices_pgr;\n"
        cur.execute(sql)
        conn.commit()

    def ompleCombos(self, combo, llista, predef, sort):
            """Aquesta funció omple els combos que li passem per paràmetres"""
            combo.blockSignals (True)
            combo.clear()
            model=QStandardItemModel(combo)
            predefInList = None
            for elem in llista:
                try:
                    if isinstance(elem, tuple):
                        item = QStandardItem(str(elem[0]))
                    else:
                        item = QStandardItem(str(elem))
                except TypeError:
                    item = QStandardItem(str(elem[0]))
                model.appendRow(item)
                if elem == predef:
                    predefInList = elem
            combo.setModel(model)
            if predef != "":
                if predefInList:
                    combo.setCurrentIndex(combo.findText(predefInList))
                else:
                    combo.insertItem(0,predef)
                    combo.setCurrentIndex(0)
            combo.blockSignals (False)

    def run(self):
        global Fitxer
        """Aquesta funcio executa el plugin"""
        conn=self.getConnections()
        self.EstatInicial()
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()

        Fitxer="ccu_temp"+datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
        
        #layers = QgsMapLayerRegistry.instance().mapLayers().values()
        self.populateComboBox(self.dlg.ComboConn ,conn,'Selecciona connexió',True)
        #self.dlg.groupBox.SetEnabled(false)
        
        #self.populateComboBox(self.dlg.GrafCombo ,Grafs,'Selecciona connexió',True)
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result==1:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
        if result==0:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
